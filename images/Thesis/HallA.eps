%!PS-Adobe-3.1 EPSF-3.0%%Title: HallA.eps%%Creator: Adobe Illustrator(R) X%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: Kees de Jager%%CreationDate: 1/21/04%%BoundingBox: 0 0 663 300%%HiResBoundingBox: 0 0 662.6734 299.5010%%CropBox: 0 0 662.6734 299.5010%%LanguageLevel: 2%%DocumentData: Clean7Bit%ADOBeginClientInjection: DocumentHeader "AI10"%ADOEndClientInjection: DocumentHeader "AI10"%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)%%+ procset Adobe_CoolType_Core (2.12 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %AI7_Thumbnail: 128 60 8%%BeginData: 7598 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0CFFA8FD44FFA8FD3AFF7DFD44FFA8FD3AFFA8FD14FF277D5227%FF2727FFF87D52525227527D2752275252527D52F87D7D7DFD14FF7DFD3A%FF27F87DA87DA87DA87DA87DA87DA87DA87DA87DA8A827277DF8A82727FF%2727F8F82727F8522727F8F8F827FD05F852A87DA87DA87DA87DA87DA87D%A87DA87DA87D52F852FD3AFFA8A8FD41FFA8FFA8FD3AFF7DFD33FFF85252%27277D5227527D7D52527DFFFFFFA8FD3AFFA8FD33FF27F827F827527D27%2727FF275227FFFFFFA8FD3AFF7DFD44FFA8FD3AFFA8FD35FF27275227FD%067DFD05FFA8FD3AFF7DFD21FFA8FD11FF7DFF27F8F8F827F8F87DF852FD%05FFA8FD3AFFA8FD21FFA8FD11FFA8FD10FF7DFFFFA8F8F87D5252F87D27%52277D7D27FD2AFF7DFD17FF7DA87DA87DA87DA87DA852A87DA87DA87DA8%7DA87DFD07FF7D7DF87D525252272752527DFD05FFA8FFFF7D27F82727F8%2727277D27F82727A8FD29FFA8FD11FFA87DFD04A8FFFFFF7DA87DA87DA8%7D7D7DA87DA87DA87DA8A8FFFD08A87D5227F8F85227F827F827FD05FFA8%FD3AFF7DFD0CFFA87DA87DA8A8FFFD047D525252FD057D27272752272752%7D7D7D527D52FD047DA8A8A8527D7DA8FD0DFFA8FD07FFA8FD32FFA8FD09%FFA87DA8A8FF7DA87D7D527D7DA87DFD08FFA8FFA8FFFFA8FD07FFFD097D%A8A8A87DA8A8FD09FFA8FD06FFA8FD33FF7DFD06FF7D7DA8A8A87D7D527D%7D7DA8FD0DFF7DFFA8FFFFA8FD0CFFA87D527D527D527DA8A87DA8A8FD06%FFA8FD05FFA8FD34FFA8FD04FF7DA8FFA87D7D527D7DFD12FF7DFFA8FFFF%7DFD0EFFA8FFFFFD057DA8A8A87DA8FD04FFA8FD04FFA8FD35FF7DFF7D7D%A8A87D7D527D7DFD15FF52A87DA87D7DFD0EFF7DFD05FFA87D527D7D7DA8%A87DFFFFA8FFFFFFA8FD2FFF7DA8A8A87DA8A87D7DFFFD057DFD15FFFD04%A87D7DA8A87DA8A8A87DA8A8A87DA8A8A87DA8A87D7DA8A8A87DA8A87D52%FD047DFF7D7D7DFFFFA8FD37FF7D7D527D7DA8FD16FF7DA8A8FFFFFF7DFD%11FF7DFD07FF7DA87DA8FD097DA87D7DA8FD32FFFD047DA8FD17FFA8A8A8%7DA8A8A8FD12FFA8FD0AFFFD04A87D7D527DFD05FF7DA8FD30FF52A852A8%FD04FFA8277DA87DA87DA87DA87DA87DA87DA87DA87DA87DFF7DFF7DFFA8%A87DA87DA87DA87DA87DA87DA87DA87DA87DA8277D7DA87DA85252275252%7D52527DFF52527D7DFD05FFA87DFD2FFF7D7DA8FD06FFF8A8FD14FFA87D%7DFFFFA8FD11FF2752A8FFFFFF7D27FD08522752A87DFD07FF7DA8FD2DFF%52A87DFD06FFA8FD16FF52FD15FF7D52527DA8FF7D5227FD08527D7D7DFD%08FF7D7DFD2CFF7D7DA8FD05FF527D7DA8F827FD27FF7DA852A8527DFFA8%FD05527D527D7D5252A87DFD0AFF7DFD2AFFA87D7D7DFD05FF277D27FF27%27FD16FF2727527D527D2727527D525252FFFFFF7DA8527D7D7D527D7D52%27FD05527D52527D7D7DFD0BFF7D7DA87D7D7DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA8FD08FFA852527D2727527D7D527D%52FFF8FD0452F87D27A8FD10FF5227522752525227275227F8F8FFFF7DA8%7D7D527DA8A8277DFD06527D7D525252A87DFD0FFFA8A8FD26FF7D275227%27F8F82727FF27F8F8F8FD0427A8FD13FFA8FD0BFF527DA8FF7D52FD047D%5227FD08527D7D7DFD0FFFA87DFD26FF7DA8FD06FFA8FD05FF527DFD16FF%A8FD0BFF52FD047D527DA8FFA85252527D7D7D527D525252A87DFD0FFFA8%A8FD24FFFD047DFD06FFA8FD1DFF7DA8FD05FFFD057D52FD0C2752522752%2752527D7D7DFD0FFFA87DFD23FFA85252527DA8FD05FF7DFD1EFFA87DFF%52FFFF52F827F827F8FD042752275227522752527DFD0752A87DFD0FFF7D%A8FD26FF7D7DFD06FFA8FD20FF52F87DFF2727F8FD042752275227272752%2727527DFD0652277D7D7DFD0FFFA87DFD07FFA87D7D7D527D7D7D527D7D%7D527D7D7DFD0DFF52527D7DA8FD05FFA8FD20FFA87D7D27522752275227%2727522752FD05277D5252527D5252527D7DA87DFD0FFFA8A8FD06FFA8A8%7DA87DA87DA87DA87DA87DA87DA87D7DFD0CFFA87D7D7DFD06FFA8FD08FF%A8FD11FFA8FFA87D5227275227522752272727522752FD0427F82727FD09%52FD047DFD0FFFA87DFD05FFA87D7DA87DA87DA87DA87DA87DA87DA87DA8%7D7DFD0DFF7DA8FD06FFA8FD08FFA8FD05FF277D52527D527DF87DFFFFFF%A85227275227522752275227522752272727527D7D5252277D27FD08527D%7DA87DFD0FFFA8A8FD04FFA87D7DA87DA87DA87DA87DA87DA87DA87DA87D%A87D7DFD08FFA8FD057DFD06FFA8FD08FF7DFD05FF27A8F8272727F8F852%A87DFFA852FD0C27F827527DFD05527D275227FD047D272752527D7D7D52%7D527D527D527D527D527D527D527D7D7D527D527D7DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87D7DFD07FF527D527D7DA8FD06FFA8FD07FF7D%27FD09FF7D7DFD04FF2752FFA852527D7D7D527D7D52F827F827527D5252%27FD057D277DFD04FF527D52FF7DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%FD13FFA8FD08FF27FD0FFFA852527D5252527D7D7D527D2727F827275227%52527D27A87D5227527DFD04FF525252A8FFA8FFA8FFA8FFFD09A8FFA8A8%7DFFA8FFA8FFA8FFA8A87DA87D7D7DA87DFFA8FFA8A87DA87DA87D7DFD07%FF7DA8A8A87DA87DA87DA8A8A87DA87DA87DFD04A87D7DA87DA87DA8A8A8%7DA87DA87DA8A8A87D7D52A8FD067D527D5252527D7D7D527D7D7D527D52%5252A8A8A87DA8527D52A8A8A87DA87DFD04527D527D52A852FD077D52FD%067DA87DA8A8A87D7D7DA87DFF7DA87DA87DA852FD07FFFD057DFD07FFA8%FD19FF7DFD05527D527D27522727F8F8F827F8F8F827F8F8F827F827FD04%FF7D525227FD06FF7DA87D7DFFA8FFA8FFA8FD0DFFA8525227FD0452FFFF%FFA8A87DA87DA87D7DFD07FF527D7D7D52FD07FFA8FD17FF7D7D5252527D%7DA8FD04FF5227F827F827F827F827F827F827F82727FD04FF52525227FD%06FFA8FF7DA8FFA8FFA8FFA8FD09FFA8FFA8FFA87DA8FFA8FF52FFA8FFA8%FF7DA87DA87DA852FD0BFF52FD07FF277DFD16FF7D7D7D527D7D7DFD05FF%52F827F8F8F827F8F8F827F8F8F827F827FD04FF7D522752FD07A87D7DFD%11A87DA87DA87DA87DA87D2752A87DA87DA87DA87DA87D7DFD0BFF52FD07%FF27FD17FF525227525252275227522752FD072752272727522727F82727%FD04FFA8275227FF7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA8277D7DA87DA87DA87DA87D7DFFFFFF7DA87D%A87DA87DA8A8527D7D527D7D7D52527D7D527D7D7D527D527D527D7D7D52%7D7D7D527D7D7D527D525227FD04527D7D7D525227F8F827527D527D7D7D%5252F8F8F8527D7D527D27F8F8F852FD1A7DA87DA87DA87DA87D7D7DA87D%A87DA87DA87D7DA8FD0CFF7DA87DA87D7D7DA87DA87DA87DA87DA852277D%A87DA87DA87DA87DA87DA87DA87DA8527D52A87DA87DA87DA87DA87DA87D%7D527D7D7D527D7D7D527D7D7D527D7DA87DA87DA87DA87DFD16FFA87DA8%7DA87DA87DA87DA87DA87DA87DA87D7DA8FD0DFFA87DA87DA8A8FD0AFFA8%27FD05FF7D7D7DA87DA87DA87DA87D7D527D7DA87DA87DA87DA87DA87DA8%FD10FFFD087DFD17FFA87DA87DA87DA8527D7DA87DA87DA87D7DA8FD1FFF%A8FD06FF7DA87DA87DA87DA87DA87D527DA87DA87DA87DA87DA87DA87DFD%13A87DFD04A8FD19FF7D7D7DA87D7D7DA87D7D7DA87D7DA8FD20FF7DFD11%FF7DFD43FF7DFD29FFA8FD11FFA8FD43FFA8FD29FF7DFD55FF7DFD0DFF27%2752A8F82752277DFD0452A87D7D27527D52FFF8FD0452F85227A8FD0BFF%7D7D2752F8522727527D27F8527D2727527D7D527DFFF8525227A827F852%7D7D527D277D52FD12FF27277D7D7D2752FF522727A852527D7DA87DFD0E%FF275227FFFD0527F8F827F87D5252F8F82727FF27F8F8F8FD0427A8FD0B%FFA8522727F8272727F87D2752F8F827F827F8272727FFF8F827F8A827F8%F852FD052752FD12FF2727F852F8F8F8FF2752F87DF8272727FD29FF527D%FD16FF52FD3CFF7DFDCAFFA8FD69FF52FD0527527D27F87D527D525227A8%5252A8522727FF522752F852527D5227F87D522752277D5252272727527D%5252FD4FFF52522752275227A827F82752272727F87D52F87D2752FFFF27%272752F8F8522727F8F827277D52522727F8522727F8F827FDFCFFFDAFFF%FF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%ADOBeginClientInjection: DocumentProlog Start "AI10"%ADOEndClientInjection: DocumentProlog Start "AI10"%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 60 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 		exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def	/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup /Cyan eq{						pop (_Cyan_)					}{						dup /Magenta eq{							pop (_Magenta_)						}{							dup /Yellow eq{								pop (_Yellow_)							}{								dup /Black eq{									pop (_Black_)								}{									dup () cvn eq{										pop (Process)									}if								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def		/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust		AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer		AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse		AGMUTIL_GSTATE_flt setflat	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/rdline{	currentfile AGMUTIL_str256 readline pop} bdf/rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def				AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/AGMUTIL_imagefile nd/AGMUTIL_imbuf nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put	exch	load exec}def/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf		1 1 Height { 			pop			DataSource dup type /filetype eq{				AGMUTIL_imbuf readstring pop			}{				exec			} ifelse			AGMUTIL_imagefile exch writestring		}for		true	}ifelse	end}def/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}def/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{     2{/exec load}repeat     3 1 roll     [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin    currentdict 2 index known{    	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse	    addprocs /TransferFunction xdf 	    currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 205 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_src256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_will_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/stkpath_clp_npth{	strokepath clip newpath} def/stk_n_clp_npth{	gsave stroke grestore clip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont		/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def				clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore			currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto		/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show						0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp exch put				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin		/AGMCORE_will_host_separate xdf	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf		errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if			/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def		AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if		/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 8 def													/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def		/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def		/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def		/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						currentpagedevice/OverrideSeparations known							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				true exch					{					convert_spot_to_process and					}				forall				}{				false exch					{					convert_spot_to_process or					}				forall				}ifelse			}ifelse		}def	}ifelse		AGMCORE_host_sep AGMCORE_will_host_separate not and {		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def		AGMCORE_color_space_onhost_seps	}if	/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/clip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&clip /clip load put			/clip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&clip			}def		}if		/eoclip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put			/eoclip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&eoclip			}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf		/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def		/map_index	{		1 index mul exch getinterval {255 div} forall	}def		level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{					/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop																	[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 exch put					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 exch put						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				AGMCORE_&&&setcolorspace			}def		}if		}{				/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def				/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def				/n_color_components		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop 1			}{				/DeviceCMYK eq{					4				}{					3				}ifelse			}ifelse		} def				/setcolor_devicecolor		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def			/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse		/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/spclp /stkpath_clp_npth ldf	/f /fill ldf	/ef /eofill ldf	/s /stroke ldf	/sclp /stk_n_clp_npth ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf		currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/current_ink{	dup length 0 eq{		pop true	}{		Adobe_AGM_Core/ink_result false put		{			dup /ProcessCyan eq{				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf			}{				dup /ProcessMagenta eq{					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf				}{					dup /ProcessYellow eq{						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf					}{						dup /ProcessBlack eq{							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf						}{							dup /sep_colorspace_dict AGMCORE_gget dup null eq{								pop false ink_result or Adobe_AGM_Core/ink_result xddf							}{								/Name get eq{									1 setsepcolor									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf								}{									false ink_result or Adobe_AGM_Core/ink_result xddf								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse			pop 		} forall		ink_result	}ifelse}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 		/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 		current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf		AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx														AGMCORE_host_sep{								AGMCORE_is_cmyk_sep							}{								Name inRip_spot_has_ink not							}ifelse							{		 						/pop cvx 1							}if							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf												[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		/MappedCSA CSA map_csa def		AGMCORE_host_sep level2 not and{			0 0 0 0 setcmykcolor		}{			[/Indexed MappedCSA 			level2 not has_color not and{				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{					pop [/DeviceGray]				}if				HiVal GrayLookup			}{				HiVal 				currentdict/RangeArray known{					{ 						/indexed_colorspace_dict AGMCORE_gget begin						Lookup exch 						dup HiVal gt{							pop HiVal						}if						NComponents mul NComponents getinterval {} forall						NComponents 1 sub -1 0{							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range							NComponents 1 roll						}for						end					} bind				}{					Lookup				}ifelse			}ifelse			] setcolorspace_opt						set_crd		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep{		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor	}{		setcolor	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave 		dup begin		1 setgray		0 0 ImageMatrix itransform 		Width Height ImageMatrix idtransform rectfill 		end		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/get_csd_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		/AGMCORE_CSD_Name xdf		AGMCORE_CSD_cache		{			dup /Name get AGMCORE_CSD_Name eq			{				exch pop exit			}{				pop			}ifelse			pop		}forall		end	}if}def/cachepattern_level2{	4 dict begin	/comparebuffer exch def	/holdbuffer exch def	/readbuffer 1024 string def	/LZWFilter holdbuffer /LZWEncode filter def	{		currentfile readbuffer readline not			{pop exit}		if		dup LZWFilter exch writestring		LZWFilter (\n) writestring		comparebuffer eq			{exit}		if	}loop	LZWFilter closefile	end}def/cachepattern_level3{	3 dict begin	/comparebuffer exch def	/readbuffer 1024 string def	/DoEOL false def	{ 		DoEOL			{			(\n)			/DoEOL false def			}			{			currentfile readbuffer readline not				{pop ()}				{				dup length 0 eq					{ pop(\n)}					{					dup comparebuffer eq						{pop ()}						{/DoEOL true def}					ifelse					}				ifelse				}			ifelse			}		ifelse	} /ReusableStreamDecode filter	end}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get	}if}def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix	makepattern}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			false sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{		currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse		Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/AGMCORE_ctm_stack bdict	/push_ctm {		stack length size le{			stack dup length 2 mul array 			dup /stack exch def			copy pop		}if		stack size 3 -1 roll put		/size size 1 add def	}	/pop_ctm {		/size size 1 sub def		size 0 lt{ 			/size 0 def		}if		stack size get	}	/stack 1 array	/size 0 edict def/save_ctm{	matrix currentmatrix AGMCORE_ctm_stack begin 		push_ctm 	end}def/restore_ctm{	AGMCORE_ctm_stack begin		pop_ctm 	end	setmatrix}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/rdcmntline {	currentfile AGMCORE_str256 readline pop	(%) anchorsearch {pop} if} def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias		/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput		Adobe_AGM_Core begin	/setcustomcolor	{				dup /customcolor_tint exch AGMCORE_gput				current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		fill grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if		Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put}def/driver_check_media_override{	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne	{		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix	}if}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.12 0%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.12 0userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dictdef}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Databegin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/argsexch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}ifdup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exchgetinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get endcountdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 subdef/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvxexch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname geterrordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashowload def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdictAdobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup where pop exch get/globaldictwhere{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{poppop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict endexch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal duplength array copy exch setglobal}bind def/newencodedfont{currentglobal{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory3 index get/FontReferenced known}{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exchdup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if defcurrentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategiesknown{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlengthadd dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init getexec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}binddef/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSubtrue def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfontexch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 31}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getintervalcvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exchdefinefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup lengthexch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add addgetinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloadedknown{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparamswhere dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 getbegin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128string def/$slen 0 def/$sname null def/$match false def/$fontname null def/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname nulldef/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFontexch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exchdefinefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfontcc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}binddef currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontnameexch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch putdup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exchmoveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsaveLevel2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall popgrestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobalexch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontNameknown{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dupbegin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dupsin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}ifelse FontName currentdict end definefont exch setglobal}bind def end def/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$ObliqueSetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slengetinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exchputinterval/$match false def $SubstituteFont/$dstack countdictstack arraydictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forallpop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch poppop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]defend def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dictdup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copiedexch definefont 3 copy put pop pop}for def currentdict end}{$Strategies/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapnamelength add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontnameexch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo getdup/Registry get Registry eq exch/Ordering get Ordering eq and and{exchrestore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end endcurrentdict/$error known currentdict/languagelevel known and dup{pop $error/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gtand{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMapfindresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index subexch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getintervalexch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelseend}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfontload put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontNameknown{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFoundtrue def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print( substitution revised, using )print dup/FontName known{dup/FontName get}{(unspecified font)}ifelse $str cvs print(.)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end endAdobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategyknown{$Strategy/$BuildFont get exec}if}if end}bind put}if end end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.%%Version: 1.13 0systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelseexch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exchdef/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun knownnot ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont knowndef/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevelknown{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFontfindresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exchlength sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFontfindresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vmexch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vmsetglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcodeexch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod putstringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 31 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvmsetglobal}if end}def/:{string currentfile exch readstring pop}executeonly defend ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.0010 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx excherrordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get(Error: )print dup(                    )cvs print errordict exch get exec stop}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dupstring/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 indexadd 2 index length le{2 index getinterval dst_string dst_index 2 indexputinterval length dst_index add/dst_index exch def exit}{1 index length 1index sub dup 4 1 roll getinterval dst_string dst_index 2 index putintervalpop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}looppop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomarkcurrentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresourcebegin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecodefilter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal/Generic/Category findresource dup length dict copy dup/InstanceType/dicttypeput/CIDFont exch/Category defineresource pop setglobal}ifelsect_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMapdefineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2copy known{get dup dup maxlength exch length eq{dup length 10 add dict copyct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copyknown{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelseload exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZEle{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec popdup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop popfalse exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArrayget 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop poppop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 01 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSETcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exchcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 rollGlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontNamecurrentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartDatact_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSetct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInitct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSetdefineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSetdefineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index beginCIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCodeexch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 rolltrue charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidthmoveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aloadpop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dupmaxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdictend/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring putrootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfontct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidthsetlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDictct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dupct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Privateget mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse getexec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get beginct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encodingct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load defct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string defcurrentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dupnot{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WModeexch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrixmatrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}ifdef/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if arraydef BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProcknown{CIDFont/CDevProc get/CDevProc exch def}if currentdict endBaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVectorexch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 muldef FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefontsetfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths getbegin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astoredef}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop popexch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMapct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}binddef currentdict readonly pop end end%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 65 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if /AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/idximg /indexed_imageormask ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				AGMIMG_&image			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint{		0 get		dup /DeviceGray eq{			pop AGMCORE_black_plate not		}{			/DeviceCMYK eq{				AGMCORE_is_cmyk_sep not			}if		}ifelse	}{		false	}ifelse}def/imageormask{	begin		SkipImageProc not{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq{					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					image				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					AGMCORE_host_sep{						currentgray 1 ne{							currentdict imageormask_sys						}{  	 						currentoverprint not{  			 					1 AGMCORE_&setgray  	 							knockout_image_samples  			 					currentdict imageormask_sys  			 				}{  			 					currentdict ignoreimagedata  			 				}ifelse				 		}ifelse					}{						imagemask					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								MultipleDataSources{									4 {pop} repeat									/DataSource [										DataSource 0 get /exec cvx										DataSource 1 get /exec cvx										DataSource 2 get /exec cvx										DataSource 3 get /exec cvx										/AGMCORE_get_ink_data cvx									] cvx def								}{									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def								}ifelse									/Decode [ Decode 0 get Decode 1 get ] def								/MultipleDataSources false def								/NComponents 1 def								/Operator /image def								AGMCORE_is_cmyk_sep{									currentoverprint InksUsed current_ink not and{										currentdict consumeimagedata									}{										invert_image_samples						 				1 AGMCORE_&setgray										currentdict imageormask_sys									}ifelse								}{										currentdict ignoreimagedata								}ifelse							}{																	MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								image							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentoverprint InksUsed current_ink not and{								}{									currentcolorspace overprint_plate not{										knockout_unitsq									}if								}ifelse							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc not{		save mark 			AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentoverprint InksUsed current_ink not and{						}{							currentdict/ImageMatrix get concat							knockout_unitsq						}ifelse					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{							currentdict consumeimagedata  							currentoverprint not Name (All) eq or{								gsave 								knockout_unitsq								grestore		 					}if 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}if	end	end}def/imageormask_l2_overprint{		currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 									currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace								AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 								mark exch						dup	dup dup														AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse								AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse						imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark 	 		currentdict 		AGMCORE_host_sep{ 						Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{					knockout_unitsq				}if			}{	 			AGMCORE_is_cmyk_sep{					Operator /imagemask eq{						imageormask_sys					}{						level2{							indexed_image_lev2_sep						}{							indexed_image_lev1_sep						}ifelse					}ifelse				}{					currentoverprint not{						knockout_image_samples		 				imageormask_sys		 			}{		 				currentdict consumeimagedata		 			}ifelse				}ifelse			}ifelse 		}{			level2{				imageormask			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin				currentcolorspace 		dup 1 /DeviceGray put		dup 3 [			currentcolorspace 3 get 			{				exch 4 mul 4 getinterval {} forall				AGMCORE_get_ink_data 255 div 1 exch sub			} /exec cvx		] cvx put		setcolorspace				currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			AGMIMG_&image		}ifelse				end end}def/OPIimage{	dup type /dicttype ne{		10 dict begin			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/ImageType 1 def			/Decode [0 1 def]			currentdict		end	}if	dup begin		/NComponents 1 cdndf		/MultipleDataSources false cdndf		/SkipImageProc {false} cdndf		/HostSepColorImage false cdndf		/Decode [				0 				currentcolorspace 0 get /Indexed eq{					2 BitsPerComponent exp 1 sub				}{					1				}ifelse		] cdndf		/Operator /image cdndf	end	/sep_colorspace_dict AGMCORE_gget null eq{		imageormask	}{		gsave		dup begin invert_image_samples end		sep_imageormask		grestore	}ifelse}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/InksUsed [] def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse										Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 											AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 												currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{										MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop								Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 									{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{								MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResource%ADOBeginClientInjection: DocumentProlog End "AI10"%ADOEndClientInjection: DocumentProlog End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetup%ADOBeginClientInjection: DocumentSetup Start "AI10"%ADOEndClientInjection: DocumentSetup Start "AI10"Adobe_AGM_Utils begin2 2010 true Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get exec%ADOBeginClientInjection: DocumentSetup End "AI10"%ADOEndClientInjection: DocumentSetup End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: HallA.eps 1%%EndPageComments%%BeginPageSetup%ADOBeginClientInjection: PageSetup Start "AI10"%ADOEndClientInjection: PageSetup Start "AI10"Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%ADOBeginClientInjection: PageSetup End "AI10"%ADOEndClientInjection: PageSetup End "AI10"%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -299.501 translate[1 0 0 1 0 0 ]  concatmark/0 [/DeviceGray] add_csa/CSA /0 /1 [/DeviceCMYK] add_csa/CSA /1 /2 [/DeviceRGB] add_csa/CSA /2 cleartomark800 path_rez% page clipgsavenewpathgsave % PSGState0 0 mo0 299.501 li662.674 299.501 li662.674 0 liclp[1 0 0 1 0 0 ] concat%ADOBeginClientInjection: BeginPageContent "AI10"%ADOEndClientInjection: BeginPageContent "AI10"gsave % PSGState0 0 mo663 0 li663 300 li0 300 li0 0 liclp250.751 206.104 mo250.751 194.556 li247.952 194.556 li247.952 206.104 li250.751 206.104 lifalse sop0 0 0 0.3 cmykf0.45 lw0 lc0 lj4 ml[] 0 dshtrue sadj250.751 206.104 mo250.751 194.556 li247.952 194.556 li247.952 206.104 li250.751 206.104 licp0 0 0 1 cmyks256.351 206.104 mo256.351 194.556 li253.551 194.556 li253.551 206.104 li256.351 206.104 li0 0 0 0.3 cmykf256.351 206.104 mo256.351 194.556 li253.551 194.556 li253.551 206.104 li256.351 206.104 licp0 0 0 1 cmyks283.994 206.195 mo283.994 193.597 li262.648 193.597 li262.648 206.195 li283.994 206.195 li0 0 0 0.3 cmykf283.994 206.195 mo283.994 193.597 li262.648 193.597 li262.648 206.195 li283.994 206.195 licp0 0 0 1 cmyks262.648 204.355 mo262.648 196.656 li247.603 196.656 li247.603 204.355 li262.648 204.355 li0 0 0 0.3 cmykf262.648 204.355 mo262.648 196.656 li247.603 196.656 li247.603 204.355 li262.648 204.355 licp0 0 0 1 cmyks262.648 207.504 mo262.648 191.408 li258.449 191.408 li258.449 207.504 li262.648 207.504 li0 0 0 0.3 cmykf262.648 207.504 mo262.648 191.408 li258.449 191.408 li258.449 207.504 li262.648 207.504 licp0 0 0 1 cmyks287.843 207.504 mo287.843 191.408 li283.644 191.408 li283.644 207.504 li287.843 207.504 li0 0 0 0.3 cmykf287.843 207.504 mo287.843 191.408 li283.644 191.408 li283.644 207.504 li287.843 207.504 licp0 0 0 1 cmyks291.342 205.404 mo291.342 194.207 li288.192 194.207 li288.192 205.404 li291.342 205.404 li0 0 0 0.3 cmykf291.342 205.404 mo291.342 194.207 li288.192 194.207 li288.192 205.404 li291.342 205.404 licp0 0 0 1 cmyks370.949 113.2 mo406.991 113.2 li419.588 125.098 li419.588 165.688 li415.388 165.688 li415.388 155.54 li370.773 155.191 li370.949 113.2 li0 0 0 0.590001 cmykf0.9 lw370.949 113.2 mo406.991 113.2 li419.588 125.098 li419.588 165.688 li415.388 165.688 li415.388 155.54 li370.773 155.191 li370.949 113.2 licp0 0 0 1 cmyks367.365 201.904 mo367.365 154.666 li292.132 154.666 li292.132 201.904 li367.365 201.904 li0 0 0 0.89 cmykf0.45 lw367.365 201.904 mo367.365 154.666 li292.132 154.666 li292.132 201.904 li367.365 201.904 licp0 0 0 1 cmyks344.005 171.112 mo351.179 178.461 li351.179 178.461 341.38 194.907 316.711 192.283 cv316.711 183.709 li344.005 171.112 li0 0 0 0.410001 cmykf0.9 lw344.005 171.112 mo351.179 178.461 li351.179 178.461 341.38 194.907 316.711 192.283 cv316.711 183.709 li344.005 171.112 licp0 0 0 1 cmyks317.061 192.633 mo317.061 192.633 310.062 191.582 310.938 201.554 cv310.938 201.554 339.631 201.206 359.927 201.554 cv359.927 201.554 363.426 200.855 366.925 189.659 cv361.851 183.534 li361.851 183.534 358.876 178.11 351.528 178.811 cv351.528 178.811 342.779 195.082 317.061 192.633 cv0 0 0 0.410001 cmykf317.061 192.633 mo317.061 192.633 310.062 191.582 310.938 201.554 cv310.938 201.554 339.631 201.206 359.927 201.554 cv359.927 201.554 363.426 200.855 366.925 189.659 cv361.851 183.534 li361.851 183.534 358.876 178.11 351.528 178.811 cv351.528 178.811 342.779 195.082 317.061 192.633 cvcp0 0 0 1 cmyks374.708 114.951 mo374.708 111.976 li365.259 111.976 li365.259 114.951 li374.708 114.951 li0 0 0 0.590001 cmykf0.45 lw374.708 114.951 mo374.708 111.976 li365.259 111.976 li365.259 114.951 li374.708 114.951 licp0 0 0 1 cmyks373.308 151.167 mo373.308 115.13 li367.359 115.13 li367.359 151.167 li373.308 151.167 li0 0 0 0.590001 cmykf373.308 151.167 mo373.308 115.13 li367.359 115.13 li367.359 151.167 li373.308 151.167 licp0 0 0 1 cmyks378.473 92.9053 mo347.354 81.8516 300.213 69.6172 241.62 68.293 cv241.62 68.293 140.701 67.0157 62.775 112.367 cv62.775 191.248 li36.9498 191.248 li36.9498 185.181 li57.0269 185.181 li57.0269 173.045 li48.7242 173.045 li48.7242 166.656 li57.6666 166.656 li57.6666 159.632 li48.0855 159.632 li48.0855 153.243 li57.6666 153.243 li57.6666 139.192 li48.8834 139.192 li48.8834 133.284 li58.7837 133.284 li58.7837 126.894 li52.7164 126.894 li52.7164 110.929 li52.7164 110.929 127.289 66.0577 241.939 65.0987 cv241.939 65.0987 338.707 60.628 432.599 111.088 cv432.599 181.987 li546.292 181.987 li565.454 162.824 li638.907 162.824 li662.224 186.14 li662.224 212.646 li637.412 240.046 li566.028 240.046 li545.033 224.65 li431.324 224.521 li431.31 235.848 li398.068 235.848 li391.419 231.998 li307.438 231.998 li302.189 238.647 li182.866 238.647 li174.469 229.394 li87.688 229.394 li82.439 233.399 li57.0269 233.399 li57.0269 224.919 li422.38 224.919 li422.38 112.367 li422.38 112.367 413.296 106.532 392.818 98.3282 cv378.473 98.3282 li378.473 92.9053 li0 0 0 0.3 cmykf0.9 lw378.473 92.9053 mo347.354 81.8516 300.213 69.6172 241.62 68.293 cv241.62 68.293 140.701 67.0157 62.775 112.367 cv62.775 191.248 li36.9498 191.248 li36.9498 185.181 li57.0269 185.181 li57.0269 173.045 li48.7242 173.045 li48.7242 166.656 li57.6666 166.656 li57.6666 159.632 li48.0855 159.632 li48.0855 153.243 li57.6666 153.243 li57.6666 139.192 li48.8834 139.192 li48.8834 133.284 li58.7837 133.284 li58.7837 126.894 li52.7164 126.894 li52.7164 110.929 li52.7164 110.929 127.289 66.0577 241.939 65.0987 cv241.939 65.0987 338.707 60.628 432.599 111.088 cv432.599 181.987 li546.292 181.987 li565.454 162.824 li638.907 162.824 li662.224 186.14 li662.224 212.646 li637.412 240.046 li566.028 240.046 li545.033 224.65 li431.324 224.521 li431.31 235.848 li398.068 235.848 li391.419 231.998 li307.438 231.998 li302.189 238.647 li182.866 238.647 li174.469 229.394 li87.688 229.394 li82.439 233.399 li57.0269 233.399 li57.0269 224.919 li422.38 224.919 li422.38 112.367 li422.38 112.367 413.296 106.532 392.818 98.3282 cv378.473 98.3282 li378.473 92.9053 li0 0 0 1 cmyks420.463 193.157 mo623.417 193.157 li623.417 208.553 li541.884 208.553 li541.534 212.753 li419.763 212.753 li420.463 193.157 li0 0 0 0 cmykf0.45 lw420.463 193.157 mo623.417 193.157 li623.417 208.553 li541.884 208.553 li541.534 212.753 li419.763 212.753 li420.463 193.157 licp0 0 0 0 cmyks37.8951 205.337 mo61.9693 205.337 li61.9693 225 li57.0699 225 li57.0699 210.98 li37.8951 210.98 li37.8951 205.337 li0 0 0 0.3 cmykf37.8951 205.337 mo61.9693 205.337 li61.9693 225 li57.0699 225 li57.0699 210.98 li37.8951 210.98 li37.8951 205.337 licp0 0 0 1 cmyks294.666 202.43 mo288.105 212.052 li370.511 212.052 li370.511 202.605 li294.666 202.43 li0 0 0 0.89 cmykf294.666 202.43 mo288.105 212.052 li370.511 212.052 li370.511 202.605 li294.666 202.43 licp0 0 0 1 cmyks288.018 212.404 mo288.367 223.25 li294.491 223.25 li294.491 221.151 li347.679 221.151 li351.179 219.751 li370.511 219.751 li370.511 212.404 li288.018 212.404 li0 0 0 0.89 cmykf288.018 212.404 mo288.367 223.25 li294.491 223.25 li294.491 221.151 li347.679 221.151 li351.179 219.751 li370.511 219.751 li370.511 212.404 li288.018 212.404 licp0 0 0 1 cmyks297.815 225.613 mo297.815 221.327 li295.19 221.327 li295.19 225.613 li297.815 225.613 li0 0 0 0.89 cmykf297.815 225.613 mo297.815 221.327 li295.19 221.327 li295.19 225.613 li297.815 225.613 licp0 0 0 1 cmyks304.639 225.613 mo304.639 221.327 li302.014 221.327 li302.014 225.613 li304.639 225.613 li0 0 0 0.89 cmykf304.639 225.613 mo304.639 221.327 li302.014 221.327 li302.014 225.613 li304.639 225.613 licp0 0 0 1 cmyks311.812 224.826 mo311.812 222.201 li306.302 222.201 li306.302 224.826 li311.812 224.826 li0 0 0 0.89 cmykf311.812 224.826 mo311.812 222.201 li306.302 222.201 li306.302 224.826 li311.812 224.826 licp0 0 0 1 cmyks306.214 224.3 mo306.214 222.988 li304.639 222.988 li304.639 224.3 li306.214 224.3 li0 0 0 0.89 cmykf306.214 224.3 mo306.214 222.988 li304.639 222.988 li304.639 224.3 li306.214 224.3 licp0 0 0 1 cmyks302.014 224.563 mo302.014 222.465 li297.903 222.465 li297.903 224.563 li302.014 224.563 li0 0 0 0.89 cmykf302.014 224.563 mo302.014 222.465 li297.903 222.465 li297.903 224.563 li302.014 224.563 licp0 0 0 1 cmyks362.55 225.613 mo362.55 221.327 li365.175 221.327 li365.175 225.613 li362.55 225.613 li0 0 0 0.89 cmykf362.55 225.613 mo362.55 221.327 li365.175 221.327 li365.175 225.613 li362.55 225.613 licp0 0 0 1 cmyks355.728 225.613 mo355.728 221.327 li358.352 221.327 li358.352 225.613 li355.728 225.613 li0 0 0 0.89 cmykf355.728 225.613 mo355.728 221.327 li358.352 221.327 li358.352 225.613 li355.728 225.613 licp0 0 0 1 cmyks348.555 224.826 mo348.555 222.201 li354.064 222.201 li354.064 224.826 li348.555 224.826 li0 0 0 0.89 cmykf348.555 224.826 mo348.555 222.201 li354.064 222.201 li354.064 224.826 li348.555 224.826 licp0 0 0 1 cmyks354.152 224.3 mo354.152 222.988 li355.728 222.988 li355.728 224.3 li354.152 224.3 li0 0 0 0.89 cmykf354.152 224.3 mo354.152 222.988 li355.728 222.988 li355.728 224.3 li354.152 224.3 licp0 0 0 1 cmyks358.352 224.563 mo358.352 222.465 li362.464 222.465 li362.464 224.563 li358.352 224.563 li0 0 0 0.89 cmykf358.352 224.563 mo358.352 222.465 li362.464 222.465 li362.464 224.563 li358.352 224.563 licp0 0 0 1 cmyks370.072 220.626 mo370.072 219.751 li351.179 219.751 li351.179 220.626 li370.072 220.626 li0 0 0 0.89 cmykf370.072 220.626 mo370.072 219.751 li351.179 219.751 li351.179 220.626 li370.072 220.626 licp0 0 0 1 cmyks355.728 224.3 mo355.728 220.8 li353.628 220.8 li353.628 224.3 li355.728 224.3 li0 0 0 0.89 cmykf355.728 224.3 mo355.728 220.8 li353.628 220.8 li353.628 224.3 li355.728 224.3 licp0 0 0 1 cmyks367.362 224.3 mo367.362 220.8 li365.263 220.8 li365.263 224.3 li367.362 224.3 li0 0 0 0.89 cmykf367.362 224.3 mo367.362 220.8 li365.263 220.8 li365.263 224.3 li367.362 224.3 licp0 0 0 1 cmyks368.499 222.465 mo368.499 220.8 li367.362 220.8 li367.362 222.465 li368.499 222.465 li0 0 0 0.89 cmykf368.499 222.465 mo368.499 220.8 li367.362 220.8 li367.362 222.465 li368.499 222.465 licp0 0 0 1 cmyks353.628 222.465 mo353.628 220.8 li352.491 220.8 li352.491 222.465 li353.628 222.465 li0 0 0 0.89 cmykf353.628 222.465 mo353.628 220.8 li352.491 220.8 li352.491 222.465 li353.628 222.465 licp0 0 0 1 cmyks227.131 221.031 mo227.131 219.052 li288.367 219.052 li288.367 221.031 li227.131 221.031 li0 0 0 0.89 cmykf227.131 221.031 mo227.131 219.052 li288.367 219.052 li288.367 221.031 li227.131 221.031 licp0 0 0 1 cmyks255.65 218.877 mo255.65 210.829 li225.032 210.829 li225.032 218.877 li255.65 218.877 li0 0 0 0.405 cmykf255.65 218.877 mo255.65 210.829 li225.032 210.829 li225.032 218.877 li255.65 218.877 licp0 0 0 1 cmyks245.327 210.871 mo245.327 194.556 li235.18 194.556 li235.18 210.871 li245.327 210.871 li0 0 0 0.405 cmykf245.327 210.871 mo245.327 194.556 li235.18 194.556 li235.18 210.871 li245.327 210.871 licp0 0 0 1 cmyks255.476 225 mo255.476 220.975 li225.382 220.975 li225.382 225 li255.476 225 li0 0 0 0.405 cmykf255.476 225 mo255.476 220.975 li225.382 220.975 li225.382 225 li255.476 225 licp0 0 0 1 cmyks244.628 238.773 mo244.628 225.524 li236.404 225.524 li236.404 238.773 li244.628 238.773 li0 0 0 0.405 cmykf244.628 238.773 mo244.628 225.524 li236.404 225.524 li236.404 238.773 li244.628 238.773 licp0 0 0 1 cmyks[10.8 2.7 ] 0 dsh240.254 174.261 mo240.254 252.119 li0 0 0 1 cmyks[] 0 dsh317.936 153.966 mo317.936 138.92 li341.643 115.388 li363.776 136.033 li353.278 148.368 li345.93 148.368 li345.93 153.966 li317.936 153.966 licp0 0 0 1 cmyks331.933 127.722 mo334.557 130.171 li338.581 126.323 li337.182 124.573 li339.981 121.773 li338.931 120.547 li320.035 139.269 li320.035 144.869 li334.557 130.347 li331.933 127.722 li0 0 0 1 cmyks337.706 118.887 mo360.451 140.32 li0 0 0 1 cmyks341.73 123.787 mo321.436 150.817 li0 0 0 1 cmyks357.478 138.745 mo336.481 151.866 li0 0 0 1 cmyks320.035 139.269 mo320.035 151.958 li343.829 151.958 li343.829 146.968 li352.579 146.968 li359.927 138.57 li339.981 119.849 li338.931 120.547 li0 0 0 1 cmyks340.068 117.663 mo361.413 138.132 li362.113 136.907 li340.943 116.787 li340.068 117.663 licp0 0 0 1 cmyks337.182 124.573 mo355.728 143.469 li359.751 139.969 li0 0 0 1 cmyks336.481 131.573 mo348.73 144.169 li0 0 0 1 cmyks336.481 131.573 mo348.73 144.169 li0 0 0 1 cmyks333.332 134.72 mo344.88 146.792 li0 0 0 1 cmyks338.406 134.195 mo335.957 136.995 li0 0 0 1 cmyks340.681 136.12 mo338.231 138.92 li0 0 0 1 cmyks343.48 139.093 mo341.031 141.894 li0 0 0 1 cmyks345.58 141.718 mo343.131 144.518 li0 0 0 1 cmyks0.9 lw[5.4 2.7 ] 0 dsh330.708 148.717 mo330.708 148.717 361.501 120.024 360.977 120.373 cv0 0 0 1 cmyks[] 0 dsh343.829 151.958 mo343.829 146.617 li320.561 146.617 li320.561 151.958 li343.829 151.958 licp0 0 0 1 cmyks0.45 lw[5.4 2.7 ] 0 dsh304.639 238.647 mo430.96 238.647 li430.96 236.548 li0 0 0 1 cmyks415.388 182.31 mo415.388 155.191 li368.764 155.191 li368.764 182.31 li415.388 182.31 li0 0 0 0.590001 cmykf[] 0 dsh415.388 182.31 mo415.388 155.191 li368.764 155.191 li368.764 182.31 li415.388 182.31 licp0 0 0 1 cmyks377.772 183.008 mo368.673 183.008 li368.673 201.904 li370.6 201.904 li377.772 183.008 li0 0 0 0.590001 cmykf377.772 183.008 mo368.673 183.008 li368.673 201.904 li370.6 201.904 li377.772 183.008 licp0 0 0 1 cmyks399.117 183.008 mo416.438 183.008 li413.465 187.734 li400.517 187.734 li399.117 183.008 li0 0 0 0.590001 cmykf399.117 183.008 mo416.438 183.008 li413.465 187.734 li400.517 187.734 li399.117 183.008 licp0 0 0 1 cmyks400.517 187.734 mo401.742 220.8 li412.765 220.8 li413.465 187.734 li0 0 0 0.590001 cmykf400.517 187.734 mo401.742 220.8 li412.765 220.8 li413.465 187.734 li0 0 0 1 cmyks293.792 227.188 mo293.792 225.088 li306.124 225.088 li306.124 227.188 li293.792 227.188 li0 0 0 0.89 cmykf293.792 227.188 mo293.792 225.088 li306.124 225.088 li306.124 227.188 li293.792 227.188 licp0 0 0 1 cmyks355.377 227.188 mo355.377 225.088 li367.71 225.088 li367.71 227.188 li355.377 227.188 li0 0 0 0.89 cmykf355.377 227.188 mo355.377 225.088 li367.71 225.088 li367.71 227.188 li355.377 227.188 licp0 0 0 1 cmyks409.439 225.613 mo409.439 221.327 li412.065 221.327 li412.065 225.613 li409.439 225.613 li0 0 0 0.89 cmykf409.439 225.613 mo409.439 221.327 li412.065 221.327 li412.065 225.613 li409.439 225.613 licp0 0 0 1 cmyks402.616 225.613 mo402.616 221.327 li405.24 221.327 li405.24 225.613 li402.616 225.613 li0 0 0 0.89 cmykf402.616 225.613 mo402.616 221.327 li405.24 221.327 li405.24 225.613 li402.616 225.613 licp0 0 0 1 cmyks395.443 224.826 mo395.443 222.201 li400.954 222.201 li400.954 224.826 li395.443 224.826 li0 0 0 0.89 cmykf395.443 224.826 mo395.443 222.201 li400.954 222.201 li400.954 224.826 li395.443 224.826 licp0 0 0 1 cmyks401.043 224.3 mo401.043 222.988 li402.616 222.988 li402.616 224.3 li401.043 224.3 li0 0 0 0.89 cmykf401.043 224.3 mo401.043 222.988 li402.616 222.988 li402.616 224.3 li401.043 224.3 licp0 0 0 1 cmyks405.24 224.563 mo405.24 222.465 li409.354 222.465 li409.354 224.563 li405.24 224.563 li0 0 0 0.89 cmykf405.24 224.563 mo405.24 222.465 li409.354 222.465 li409.354 224.563 li405.24 224.563 licp0 0 0 1 cmyks402.616 224.3 mo402.616 220.8 li400.517 220.8 li400.517 224.3 li402.616 224.3 li0 0 0 0.89 cmykf402.616 224.3 mo402.616 220.8 li400.517 220.8 li400.517 224.3 li402.616 224.3 licp0 0 0 1 cmyks402.267 227.188 mo402.267 225.088 li414.599 225.088 li414.599 227.188 li402.267 227.188 li0 0 0 0.89 cmykf402.267 227.188 mo402.267 225.088 li414.599 225.088 li414.599 227.188 li402.267 227.188 licp0 0 0 1 cmyks2.7 lw36.7681 199.806 mo313.737 199.806 li313.737 199.806 332.283 200.855 341.031 197.006 cv341.031 197.006 355.553 194.033 367.099 174.261 cv416.263 120.373 li0 0 0 0.110001 cmyks0.9 lw[10.8 2.7 ] 0 dsh36.6001 198.756 mo312.688 198.756 li312.688 198.756 331.408 200.332 340.156 196.482 cv340.156 196.482 354.152 194.382 366.75 173.387 cv415.388 119.849 li0 0 0 1 cmyks354.152 151.781 mo369.812 151.781 li371.999 152.392 371.212 152.655 371.212 152.655 cv371.212 166.738 li355.645 166.738 li351.444 166.388 348.294 168.488 348.294 168.488 cv309.805 185.983 li246.202 185.983 li246.202 177.236 li345.847 153.442 li348.993 152.669 351.844 152.123 354.423 151.753 cv0 0 0 0.7 cmykf[] 0 dsh354.152 151.781 mo369.812 151.781 li371.999 152.392 371.212 152.655 371.212 152.655 cv371.212 166.738 li355.645 166.738 li351.444 166.388 348.294 168.488 348.294 168.488 cv309.805 185.983 li246.202 185.983 li246.202 177.236 li345.847 153.442 li348.993 152.669 351.844 152.123 354.423 151.753 cv0 0 0 1 cmyks306.738 162.714 mo311.288 185.285 li0 0 0 1 cmyks346.804 153.091 mo349.954 168.137 li0 0 0 1 cmyks0.45 lw[5.4 2.7 ] 0 dsh43.9478 136.47 mo69.8423 136.47 li0 0 0 1 cmyks43.9478 156.417 mo69.8423 156.417 li0 0 0 1 cmyks43.9478 169.712 mo69.8423 169.712 li0 0 0 1 cmyks1.8 lw[] 0 dsh27.1519 97.9795 mo62.8433 97.9795 li62.8433 97.9795 140.526 57.0372 241.304 59.4874 cv241.304 59.4874 338.22 55.0166 422.55 99.4561 cv450.544 99.4561 li498.145 133.321 li659.807 133.321 li0 0 0 1 cmyks520.89 193.157 mo520.89 134.021 li513.892 134.021 li513.892 193.157 li520.89 193.157 li0 0 0 0 cmykf0.45 lw520.89 193.157 mo520.89 134.021 li513.892 134.021 li513.892 193.157 li520.89 193.157 licp0 0 0 1 cmyks415.564 213.103 mo413.465 213.103 li0 0 0 0 cmykf0.9 lw415.564 213.103 mo413.465 213.103 li0 0 0 1 cmyks415.564 193.858 mo400.867 193.858 li0 0 0 0 cmykf415.564 193.858 mo400.867 193.858 li0 0 0 1 cmyks0.45 lw411.714 194.207 mo410.664 213.453 li401.218 213.453 li0 0 0 1 cmyks401.218 213.453 mo401.13 202.955 li394.832 202.955 394.568 213.453 394.568 213.453 cv401.218 213.453 li0 0 0 0.590001 cmykf401.218 213.453 mo401.13 202.955 li394.832 202.955 394.568 213.453 394.568 213.453 cv401.218 213.453 licp0 0 0 1 cmyks456.854 212.753 mo456.854 198.055 li450.205 198.055 li450.205 212.753 li456.854 212.753 licp0 0 0 1 cmyks483.974 201.73 mo483.974 197.88 li457.553 197.88 li457.553 201.73 li483.974 201.73 licp0 0 0 1 cmyks462.803 203.304 mo462.803 206.453 li462.803 206.453 460.003 204.705 460.003 208.553 cv460.003 212.578 li0 0 0 1 cmyks566.909 201.554 mo566.909 197.707 li494.12 197.707 li494.12 201.554 li566.909 201.554 licp0 0 0 1 cmyks565.328 199.63 mo570.053 195.082 li602.42 195.082 li602.42 204.53 li569.528 204.53 li565.328 199.63 li0 0 0 0.110001 cmykf565.328 199.63 mo570.053 195.082 li602.42 195.082 li602.42 204.53 li569.528 204.53 li565.328 199.63 licp0 0 0 1 cmyks2.7 lw338.323 199.456 mo609.42 200.504 li0 0 0 0.110001 cmyks0.9 lw[10.8 2.7 ] 0 dsh343.48 198.405 mo621.666 198.405 li0 0 0 1 cmyks0.45 lw[] 0 dsh456.854 202.781 mo456.854 197.181 li447.056 197.181 li447.056 202.781 li456.854 202.781 licp0 0 0 1 cmyks463.503 193.157 mo463.503 212.753 li0 0 0 1 cmyks475.399 193.157 mo475.399 212.753 li0 0 0 1 cmyks483.798 193.157 mo483.798 212.753 li0 0 0 1 cmyks494.296 193.157 mo494.296 212.753 li0 0 0 1 cmyks602.42 206.104 mo602.42 204.53 li569.528 204.53 li569.528 206.104 li602.42 206.104 li0 0 0 0.110001 cmykf[10.8 2.7 ] 0 dsh602.42 206.104 mo602.42 204.53 li569.528 204.53 li569.528 206.104 li602.42 206.104 licp0 0 0 1 cmyks572.853 209.427 mo572.853 205.404 li570.579 205.404 li570.579 209.427 li572.853 209.427 li0 0 0 0.110001 cmykf572.853 209.427 mo572.853 205.404 li570.579 205.404 li570.579 209.427 li572.853 209.427 licp0 0 0 1 cmyks598.746 209.427 mo598.746 205.404 li596.472 205.404 li596.472 209.427 li598.746 209.427 li0 0 0 0.110001 cmykf598.746 209.427 mo598.746 205.404 li596.472 205.404 li596.472 209.427 li598.746 209.427 licp0 0 0 1 cmyks[] 0 dsh62.8433 108.476 mo62.8433 0 li0 0 0 1 cmyks422.562 108.476 mo422.562 0 li0 0 0 1 cmyks66.3433 18.5469 mo165.721 18.5469 li0 0 0 1 cmyks319.686 18.5469 mo421.161 18.5469 li0 0 0 1 cmyks72.2925 16.0977 mo63.8941 18.5469 li72.2925 21.3458 li72.2925 16.0977 li0 0 0 1 cmykf[10.8 2.7 ] 0 dsh72.2925 16.0977 mo63.8941 18.5469 li72.2925 21.3458 li72.2925 16.0977 licp0 0 0 1 cmyks[] 0 dsh209.811 107.077 mo233.605 107.077 li233.605 110.226 li229.406 114.775 li215.409 114.775 li209.461 110.052 li209.811 107.077 licp0 0 0 1 cmyks234.655 109.175 mo402.616 109.175 li387.569 102.528 li377.072 102.528 li377.072 93.8702 li222.059 93.8702 li206.312 104.978 li206.312 108.476 li210.07 108.476 li0 0 0 1 cmyks202.462 108.827 mo95.7369 108.827 li0 0 0 1 cmyks221.358 101.828 mo221.358 120.724 li0 0 0 1 cmyks[5.4 2.7 ] 0 dsh242.003 118.625 mo242.003 50.3897 li0 0 0 1 cmyks413.465 20.9961 mo421.862 18.5469 li413.465 15.7471 li413.465 20.9961 li0 0 0 1 cmykf[10.8 2.7 ] 0 dsh413.465 20.9961 mo421.862 18.5469 li413.465 15.7471 li413.465 20.9961 licp0 0 0 1 cmyks[] 0 dsh229.494 82.2315 mo229.494 93.8672 li0 0 0 1 cmyks256 82.2315 mo256 93.8672 li0 0 0 1 cmyks226.957 88.8809 mo258.712 88.8809 li0 0 0 1 cmyks229.406 89.0538 mo227.831 69.1114 li227.831 69.1114 245.678 67.9717 257.313 69.5469 cv0 0 0 1 cmyks257.313 69.1983 mo256 88.8809 li0 0 0 1 cmyks259.149 70.2481 mo259.149 71.4717 li259.149 71.4717 245.59 68.8467 226.52 70.8594 cv226.52 69.2842 li226.52 69.2842 250.576 67.3604 259.149 70.2481 cvcp0 0 0 1 cmyks102.035 148.717 mo102.035 216.601 li0 0 0 1 cmyks147.176 176.011 mo147.176 197.357 li0 0 0 1 cmyks99.2349 215.628 mo101.686 224.027 li104.484 215.628 li99.2349 215.628 li0 0 0 1 cmykf[10.8 2.7 ] 0 dsh99.2349 215.628 mo101.686 224.027 li104.484 215.628 li99.2349 215.628 licp0 0 0 1 cmyks144.375 188.685 mo146.825 197.084 li149.625 188.685 li144.375 188.685 li0 0 0 1 cmykf144.375 188.685 mo146.825 197.084 li149.625 188.685 li144.375 188.685 licp0 0 0 1 cmyks[] 0 dsh102.035 113.725 mo102.035 121.424 li0 0 0 1 cmyks99.2349 117.301 mo101.686 108.904 li104.484 117.301 li99.2349 117.301 li0 0 0 1 cmykf[10.8 2.7 ] 0 dsh99.2349 117.301 mo101.686 108.904 li104.484 117.301 li99.2349 117.301 licp0 0 0 1 cmyks0 0 0 1 cmyk%ADOBeginSubsetFont: Helvetica-Bold Initial11 dict begin/FontName /Helvetica-Bold def/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def/PaintType 0 def/FontType 1 def/FontBBox { 0 0 0 0 } def/FontInfo 1 dict dup begin  /OrigFontType /TrueType defend readonly defcurrentdictendsystemdict begindup /Private 7 dict dup begin/BlueValues [-15 0 600 650] def/MinFeature {16 16} def/password 5839 def/ND {def} def/NP {put} def/RD {string currentfile exch readhexstring pop} def2 index /CharStrings 392 dict dup begin/.notdef <10bf3170245fd1223a03820c84ab4224df604f1b5035cf5bf68168bb347fe08e590356e04269139259cb> ND /space <10bf317079c7734bf7> ND /five <10bf3170573e1e04e0e0acd9d497b57b0deafc86603dc8868af87900c79d7c603ca3b2e567b575bdbcbbe2f99297d6b9b8726b12e0d82e58f56b1713c6e05190633bc6f773b2d1e76a6c21f7d3e1c28e31e6c4ac5d931161e0cfc03ceece8f5d4dfb96d670850017053aa418872fc771bc82614966c950a7dbbcbc16998b9dddefa34b5e02a5d3601b82f14e33e155145ee0d40ad6> ND /C <10bf31704ab339412d839a95db5b65576bb816b8814251d7b04f30e6086ec19cc511a7d3e1af2dcb53bb9764b009b4cfa82bf5c4a054745e70ddf77b6e2ba4555ccf6ba4223bbf93fa6aadcfd6dbbc2b68f366f49179a1bf562b41cd072763c4dd8e8a8426c9c2a8f63347dfcaeea5c3fca1035cb49c1be0743400aa6ae1f7f5db4bb6c9051a> ND /D <10bf3170258d0fb1827b4d63546d1e8890b450128f83a428451d528b2b91f67c48445941b4b04ff7aacea58280c8577400dd4599fec1d7a80bc33d84335dc3b866c2ce29398dd522af80bdb4ecb5bc2f1ebac9828b492ed3e564b6e1ed5bd26fcd618368d1006183de7a8615a9> ND /H <10bf3170245fd12235fd30864a3e1b96959651ea7c00dc24f98eb1db859fbea5a2e2358f52556ec2ba72eea2a4a823ed8f> ND /P <10bf31702957671f053c4d7e1a2ec61303d6532654231c369b8eeec82affcd9552372590e4e4922d4af4bc2ad660daed2f629d7ba9e850b35bd7e926853dacd6202d1c8cba52cc788e468b1c1d9f1c489dd3a0f6c2713bc8866b4eec2617e8e094322397> ND /S <10bf31704726f1e5ad131a0f08bdec516b23791e3dcac8682e610beee4cf1fc055e7601820f7f271e4855533bc64a51283d4b5b17077c2b761ed18dbf7882407ac65d16d7ce4bd3af8768f4e78b439c23eabf7855f5a354f2c5f26d79de8bb7284c2d38049cf4864f54e2d4e7125a49654a188bf22340eff0fceb1a73dedd8ae4db9870df1b16083184dd013fecb6e104b9de0f9de127236f819d7b2cba8f2ef3b76cbfcc6f162c307ee0582d83a01719adb64b7659fbd25e4616b3280a1195e7c5fbe> ND /a <10bf31705ac903dc9a980332054142ee136889634d508ee3460f420d7de635b656b17d4dc517bbf81b97f4033b05ed023268502d68bb449c9a1fde2e498db032aa7b27ed06798dd3692324be3595fbd663c4820f9b4e1d649c280eac7ab09c4f4e5004a902da2542fe4dc89d99c09b7b73e8c9ed5f52062297c67adac5fe64ce1a284ad0ce52bc673639194cb1b2a20d5685395da125df673686df3d381734790dd6fee84ee6f10b2bf1ee6743f7d52d75499039963c8ddce771917bf30c84e62d44cf1e40ad84047ff13610db90a3934d54ae5aa6b9930b220e06b6178ad62859f39655a7b0c55d6c4958982254164fd22e2c> ND /c <10bf31705c36af5cef4fe17ea5d6cfdcf970fe6ba98ca3edff6c9e230da73c60f419f23920caea78150ac7c45cdee15f0df004c506dc9f58c99741a40316bfb9b7744f05bbb4acc8ddae4e1fcf7fa62a12a39d87c226bc48c058c09f8f86f543c741f6906b133fdbf6e889eb25f50a58c0c54a62234a0bb777119b93193f87f6ac4eb033bf> ND /e <10bf317050d961e856d3e0fbc24a1e3ca30018c950e2b683f62e53f46660c84745fa1306bc302b6bb645ff532d79b9601802ff6ce73696606f77fe15042664ebfe237bbf10a8612e1e2ceb16f8f0f8d581fe72422470a8f9cfdc1348404543a4e67e787dcc5517203baf2e8f40717b568375b802eb787fca0c037170b7ecb4d2141073c292ebb9f0e51c9f5a658cf1c454b4628d98bb8b80081ba7> ND /f <10bf3170675b06f5341b82bb095b4a62d2b5e987c1ac8eae3e2392112b5dd7dc092e6299982d70ab3c5d74f645dfc8b41489bf59d76f2560a2b5ce1e0670d9d541811f2538a088c48f4c2960eeedcdf5831d268ee03a9294be333392bd637e3671> ND /g <10bf3170599ab5ce2b07f5fc1c73364e490fb3f578a2072cac0e86de8b82b4d868448e70b7c87efb81c0db4e84e0c7f717d9d4bbf5d4e5bb799560e89fc3ff642fc8a50b601711a9cdda6474c7ec3d65adda8e015e276391888dd5166a6ed1bb9dbddbef73a61d6e4197510580f8640db73771bc767f3ef5dca70b8240c364f6eeb4d193ec39bac7df41b6617651622af8fb5d31af43f605c8d172ee83587c4a4fd6034b159087b62e6e86f33ef0f79f1da66e26197ae3d158822a0cce20a2494cf77164167c2ee76624> ND /h <10bf31703f9318caa84ea6a9c16c1b76702e89f9d28f17996887f4d16641163503231f4d53f9a48c8861117036bf44e03eda7607789135b8f7bda045662518583c78158168ee1ef1a4c4ae780e314116f45ddd3a2f2dd96acefb4bfcba6609e498f7bbd3e8c5d27f273884737e> ND /i <10bf31703cf768e92f79b784e5739123bfa643711e35e919f3001cfa0d6985171f2e76ec61bcc965db8fd33aaa> ND /n <10bf31703f9318caa84c39b055118248ad06645e6af9a3c94c04b6ce112c7e9695252097e1eceb4242e42bec4a1fda76ccc6b5156551a7be44a9d252c14c5b40afab1f007fcb31113339d2ffcf22c7e7cb7d574b4550f48afa15a8145f82> ND /o <10bf3170599ab5ce2b3b1d39ba0248821b6c8d2a59ee8cf8bef60450cf381d7a0ee60b21648795592b463e1dcbf88f22af393643a65caf32c5ec0573008ba1c46eadec758748c17ad603fc5e89725157055cab364a4b60f416a651795e44325b7d99616ddc7e1ba8bf1896b3919176f8068546dce6de70d6f3acc9f5788a00ddc9db469c> ND /r <10bf3170383e353613770e840831b40dc281dcb1d75828063bc042c0a284e474f9fc87cdce4908a3284f03a05378f8e8ffbc82ef30148e9a45ad3fe3588b156909f72b2df92e16e0cd9b959b327205a8addfaaa156bf62a0> ND /s <10bf3170599a82aec1da869c17b98e2eb7b99773d07c6f11c63a5f54bf0afa3e5d7dc7b7d09b09548f849e21c76f7c6c1cf71f430a5e001bd251e85671387b9e6ff341a19717bd5cd747104c6f33cf01d866006e4ecaceac2870eb18bba570f087a0a493b07e33d45f5114513b46cf0d0e38b7abd289df9ce3e6c010278e6eceb05dc178d8fefb80d75b73bc941a64aafbbd8cff728d2deee42acee66ec83166545b7a378691c8e8546c69ecd87b192498aa13e3661caba06da3ba2c> ND /t <10bf3170675b06f5169c29abc2bc2a5c057adc40e0c08010b55cf62cea9a200b8ad37f1b3ebc23f808655c8ee9877b6f080ea8d0cdac563154cdbe8718b45f3f40ac609e4af4942fb9545ea134d31661dbf10d537044caad> ND /v <10bf31706ae035c090d04959298479117c1d7fbdadbb01b336662b5af1d7e1f3afddf4200e15eb89d022c179> ND endendputputdup /FontName get exch definefont popend/Helvetica-Bold findfont /Encoding getdup 32 /space putdup 53 /five putdup 67 /C putdup 68 /D putdup 72 /H putdup 80 /P putdup 83 /S putdup 97 /a putdup 99 /c putdup 101 /e putdup 102 /f putdup 103 /g putdup 104 /h putdup 105 /i putdup 110 /n putdup 111 /o putdup 114 /r putdup 115 /s putdup 116 /t putdup 118 /v putpop%ADOEndSubsetFont/Helvetica-Bold*1 [32{/.notdef}repeat /space 20{/.notdef}repeat /five 13{/.notdef}repeat /C /D 3{/.notdef}repeat /H 7{/.notdef}repeat /P 2{/.notdef}repeat /S 13{/.notdef}repeat /a /.notdef /c /.notdef /e /f /g /h /i 4{/.notdef}repeat /n /o 2{/.notdef}repeat /r /s /t /.notdef /v 137{/.notdef}repeat] /Helvetica-Bold nfnt/Helvetica-Bold*1 findfont [13.9967 0 0 -13.9967 0 0 ]mfnt sfnt93.0415 132.271 mov(55 ft) sh63.8794 146.267 mov(Crane Height) sh329.648 37.5693 mov(Detector in) sh341.297 51.566 mov(Service) sh338.598 65.5627 mov(Position) sh[] 0 dsh256.696 140.292 mo255.545 152.67 li276.54 162.818 li0 0 0 1 cmyks221.708 183.359 mo227.307 183.359 li234.655 192.458 li0 0 0 1 cmyks0 0 0 1 cmyk%ADOBeginSubsetFont: Helvetica-Bold AddGlyphssystemdict begin/Helvetica-Bold findfont dup/Private get begin/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/T <10bf317069b18243e560486fe87dc9992a887cff58ceb6ae768ec10ffbc5a8ebd8e8006a2d5e> ND systemdict /gcheck known {setglobal} if end endend/Helvetica-Bold findfont /Encoding getdup 84 /T putpop%ADOEndSubsetFont/Helvetica-Bold*1 [32{/.notdef}repeat /space 20{/.notdef}repeat /five 13{/.notdef}repeat /C /D 3{/.notdef}repeat /H 7{/.notdef}repeat /P 2{/.notdef}repeat /S /T 12{/.notdef}repeat /a /.notdef /c /.notdef /e /f /g /h /i 4{/.notdef}repeat /n /o 2{/.notdef}repeat /r /s /t /.notdef /v 137{/.notdef}repeat] /Helvetica-Bold nfnt/Helvetica-Bold*1 findfont [13.9967 0 0 -13.9967 0 0 ]mfnt sfnt176.525 187.909 mov(Target) sh11.4556 225.428 mo54.7955 225.349 li0 0 0 1 cmyks599.622 213.453 mo589.124 263.141 li580.376 263.141 li0 0 0 1 cmyks143.676 234.524 mo146.125 226.126 li148.925 234.524 li143.676 234.524 li0 0 0 1 cmykf[10.8 2.7 ] 0 dsh143.676 234.524 mo146.125 226.126 li148.925 234.524 li143.676 234.524 licp0 0 0 1 cmyks0 0 0 1 cmyk%ADOBeginSubsetFont: Helvetica-Bold AddGlyphssystemdict begin/Helvetica-Bold findfont dup/Private get begin/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/B <10bf31702819c97be241513f235017cf2215e7e3304d11e4c4a8f2062b2fbaa3bdb34ea6613397453c1bf420237d852d05377d50cdb174c1da15bf320d78729937a03f303357cc2e84068a647caab96e1f37c99f96b8277ac701f312e10810729740e19c987cc8de9fcf74e7356aa40b265d91946a3750afbe8b8f446cce88b2e82365b303a482e6582c32745954a55bec3cac6ecbc6f516d09d557a401435a9a55fa69e0232ded84ef53c368ad635b385fb> ND /m <10bf3170383c8210c072140cab27b092372ad6fc45e66f885aa29e9699871d26cc77cab87d77015eedd857057e7d9689d25512b5b1d4183a3f233fe9cf249f43f16009b9dec28a718daf89eaba8b48ea62200d69f4a3a9b2db4ec3bf5cf0c9f597fa6550074cf7800763f5c16332bbc5553b1b1c4b36f69fc744dd0f46c1d3fc066293399a13d68a03591d13540415e2fcda8052e65c6123256559533273c7d195f7f0b75ac4a369a92f27c193b2> ND /p <10bf31703a9ba95b45a9cf140d8a87a246da7f8ee6834ac3a6fd4af711bfaf9a779713b79601ce51681e76040a78f20be3d54e41c0468528668847a4343a7f9da35fe1c0edffd790f89464b5a9a3600f868b6052555628f1decdf2bd21694e5fd87e84e27613805dc0d87f767d27fee71623a2d24e464d8c95c921d9d26e126a635eb6fcd43c70565ac1e617b34672dd774b> ND /u <10bf31703a9ba95b45093029f80c676d56a14eb3d089d47b3a230306192df40a50d675b866fefa8d8fa4eead7c2f55cf8a7e50f28a850601a6d2b21237988234b84b0b8e3b2933f4071b2c62b54d46baa167df9a4944b07bf42888439e99dbb95798c329c3d68a531c2d> ND systemdict /gcheck known {setglobal} if end endend/Helvetica-Bold findfont /Encoding getdup 66 /B putdup 109 /m putdup 112 /p putdup 117 /u putpop%ADOEndSubsetFont/Helvetica-Bold*1 [32{/.notdef}repeat /space 20{/.notdef}repeat /five 12{/.notdef}repeat /B /C /D 3{/.notdef}repeat /H 7{/.notdef}repeat /P 2{/.notdef}repeat /S /T 12{/.notdef}repeat /a /.notdef /c /.notdef /e /f /g /h /i 3{/.notdef}repeat /m /n /o /p /.notdef /r /s /t /u /v 137{/.notdef}repeat] /Helvetica-Bold nfnt/Helvetica-Bold*1 findfont [13.9967 0 0 -13.9967 0 0 ]mfnt sfnt497.203 268.039 mov(Beam Dump) sh[] 0 dsh221.271 121.823 mo222.022 121.823 222.631 121.213 222.631 120.46 cv222.631 119.709 222.022 119.1 221.271 119.1 cv220.519 119.1 219.909 119.709 219.909 120.46 cv219.909 121.213 220.519 121.823 221.271 121.823 cvcp0 0 0 1 cmyks0 0 0 1 cmyk%ADOBeginSubsetFont: Helvetica-Bold AddGlyphssystemdict begin/Helvetica-Bold findfont dup/Private get begin/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <10bf317022f1fd4d6e28ab8f20027880c03e398fe031bf053f0c38618034f421f2438d588f8e196ddd1e4c645adc217204e138b193f9eaa6a6114fe3> ND /four <10bf3170573e1e04ef4f3e297da9553938b14e30db682b2344782c8dd75ccbe683ade7bac3ec91a4a9439ffbc16c65b3b8fb038a78cc436dc9b9eb48cd0a24> ND /seven <10bf3170560f9ea7ee01a751cb02c85daeb3965a53040606753980830d1a77fa203f83b167339e1e3bb403247bd19b765ad44ebd9dc74b6497d65aa991ddb396a45a762daa1a0552f70a2388> ND /I <10bf31703962678dcb35549708631a1cc34088913dcb05d34460f2> ND /d <10bf3170586c67eff3d5709368e371d37e43e421bba30e76a5c25d791547c0f9976dcf6316581fd19b4a3e2f78cd871d41eee5c9dfccd750a81ef09f2886fcaa15f1fd207b4a45450d67c360199010d49511ff667e04978afd0e8f6ad53eff0a26f669b30f792cb56dcef0f27d719d1d93b04b90acf8bd1a01d24effd149dd83f507110e63032c66a3c48fd8d611e0d706c1> ND systemdict /gcheck known {setglobal} if end endend/Helvetica-Bold findfont /Encoding getdup 49 /one putdup 52 /four putdup 55 /seven putdup 73 /I putdup 100 /d putpop%ADOEndSubsetFont/Helvetica-Bold*1 [32{/.notdef}repeat /space 16{/.notdef}repeat /one 2{/.notdef}repeat /four /five /.notdef /seven 10{/.notdef}repeat /B /C /D 3{/.notdef}repeat /H /I 6{/.notdef}repeat /P 2{/.notdef}repeat /S /T 12{/.notdef}repeat /a /.notdef /c /d /e /f /g /h /i 3{/.notdef}repeat /m /n /o /p /.notdef /r /s /t /u /v 137{/.notdef}repeat] /Helvetica-Bold nfnt/Helvetica-Bold*1 findfont [13.9967 0 0 -13.9967 0 0 ]mfnt sfnt170.008 22.7451 mov0.000244141 0 109 (174 ft Inside Diameter) wsh228.186 188.572 mo235.354 193.584 li232.277 185.285 li228.186 188.572 li0 0 0 1 cmykf[10.8 2.7 ] 0 dsh228.186 188.572 mo235.354 193.584 li232.277 185.285 li228.186 188.572 licp0 0 0 1 cmyks273.207 163.469 mo281.733 165.42 li275.764 158.884 li273.207 163.469 li0 0 0 1 cmykf273.207 163.469 mo281.733 165.42 li275.764 158.884 li273.207 163.469 licp0 0 0 1 cmyks[] 0 dsh333.683 177.761 mo347.679 200.504 li0 0 0 1 cmyks348.73 220.45 mo348.73 213.103 li0 0 0 1 cmyks331.933 200.504 mo325.984 180.911 li0 0 0 1 cmyks339.631 173.912 mo364.124 196.656 li0 0 0 1 cmyks324.584 177.411 mo318.636 155.715 li0 0 0 1 cmyks332.982 155.367 mo338.231 172.162 li0 0 0 1 cmyks249.701 188.958 mo249.701 185.983 li246.202 185.983 li246.202 188.958 li249.701 188.958 li0 0 0 0.3 cmykf249.701 188.958 mo249.701 185.983 li246.202 185.983 li246.202 188.958 li249.701 188.958 licp0 0 0 1 cmyks290.292 191.058 mo290.292 185.983 li249.701 185.983 li249.701 191.058 li290.292 191.058 li0 0 0 0.3 cmykf290.292 191.058 mo290.292 185.983 li249.701 185.983 li249.701 191.058 li290.292 191.058 licp0 0 0 1 cmyks0 0 0 1 cmyk%ADOBeginSubsetFont: Helvetica-Bold AddGlyphssystemdict begin/Helvetica-Bold findfont dup/Private get begin/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/zero <10bf3170586c505b39d8b7489a4a7bdd5c2e7e8506a954413e0bf6685242f01c5a24c81793dda953f3bdab6598ac3ffee8452996af2e3c4d1c9052f302009ef037c6cb0e1cb89ba3455288a55a6147bc8f91282a87afc766482ab9632874b7e8a8cd023946793e19bc98fccc62dddf095f39e2ff964f0f5538476eca3b8cdc4c1cc4ec602bd94453> ND /L <10bf3170258c6c1290aa424045c83fdb52e57961e66f456df1efc5d916b1> ND systemdict /gcheck known {setglobal} if end endend/Helvetica-Bold findfont /Encoding getdup 48 /zero putdup 76 /L putpop%ADOEndSubsetFont/Helvetica-Bold*1 [32{/.notdef}repeat /space 15{/.notdef}repeat /zero /one 2{/.notdef}repeat /four /five /.notdef /seven 10{/.notdef}repeat /B /C /D 3{/.notdef}repeat /H /I 2{/.notdef}repeat /L 3{/.notdef}repeat /P 2{/.notdef}repeat /S /T 12{/.notdef}repeat /a /.notdef /c /d /e /f /g /h /i 3{/.notdef}repeat /m /n /o /p /.notdef /r /s /t /u /v 137{/.notdef}repeat] /Helvetica-Bold nfnt/Helvetica-Bold*1 findfont [13.9967 0 0 -13.9967 0 0 ]mfnt sfnt0.000213623 268.039 mov0.000244141 0 103 (10 ft Beam Line Height) wsh146.825 233.048 mo146.825 263.141 li135.627 263.141 li0 0 0 1 cmyks596.112 218.321 mo600.321 210.653 li601.234 219.458 li596.112 218.321 li0 0 0 1 cmykf[10.8 2.7 ] 0 dsh596.112 218.321 mo600.321 210.653 li601.234 219.458 li596.112 218.321 licp0 0 0 1 cmyks0 0 0 1 cmyk%ADOBeginSubsetFont: Helvetica-Bold AddGlyphssystemdict begin/Helvetica-Bold findfont dup/Private get begin/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenleft <10bf31705fce2ebccd7779b4fe8f376a5a561e4e446067947c73b2c460ef00b173d476978db596bd1196a978fc14e8a6f24a687cbc90badf5218e151e3989a882c32bab8ebd23faac9f2103edbb0a213> ND /parenright <10bf3170675b06f53495228d1e7db23a63785ccc31f9ae52e7688ff43614499eae231f0ed32a5e6b0d4a92d57d7149a0cf2035082990812ed3ae9b82ed25ce4d1ae316d653e90f5b7dcc6fbe57d52555fd> ND /A <10bf3170560ef6084f2419288374a79db75beb6993722f53f63cd125b17c756d149522edf37e44d30dcd27e4f750c4c96f130b1c56af4004dc83df4c4d77> ND /N <10bf317027e8996de457f082ac74738bd91f58f6ac7663661b65fd23a96205efb7efd9487e454453f52d70bbc919> ND /R <10bf317029572e11a6307f53063436005d3b09ad97d4fdf65d2ee9a25df00e9cbef15ff147cc2b0048a01aa1bf0f554188979263843af6de23c19b55b23acad00656807bf16df1e719ffd1d35cf1a10fe013bbfc6a2051f971cb8349cc57ca020963e8d5bffc7c8d3c960f870b4f4b961995d8eca9d7cc7315c0b82e3513fc5360377eda41ecd5384f487bdbfb7c4bf8dc8ccc27d59a1df3f4eee7147d964c28f1b99c9534c675f5c6d196a387a18cafa6d9dac8> ND /U <10bf3170258d0fb18260f46014fc09936946b1ddf30fc35dd285d7f4fea8892b9c489c07528021d8a179fbc785a98c0ff0a8afd496c040279f7124fc81720e7865a72b14776f375fad352fe034a0145a02430d1e1bf8743efe> ND /l <10bf31703d39827325dea7bd347112d69ff6f7b012b4362cebf47d> ND /w <10bf317060fe800d83cb5903b8c49ea2202331196c7229d345634075de53e9a74d1d79b745f8f166ae4e25d85773e7bec84f78a4ba28f4f9582235611931669d> ND /x <10bf31706ae035c09077ecd326105f5cbac63191af8af6e20d79db8eede66fce3c4e695d5fb9c00ceb4049515a2e04fca708276a578c45d5141c4f77cf> ND /y <10bf3170675482b1c6c24e047cb5f263e4f5b35c2aedcb673811f015c4ebb46886267a29dc1a199b8a94eeeca67f3a37f6368a191c6a790a7c7d7f9f7419a0b167e95a4b3682c708b52ed1f693b5a2148527e7416cb2d1c2c8f6ecbbfe838838b6bf37568ad3> ND /z <10bf317069b1fd7146d072041113aa794b0ce8e3067c550627b28af837d122ced7b71eee6577d37e23dafc5558927728> ND systemdict /gcheck known {setglobal} if end endend/Helvetica-Bold findfont /Encoding getdup 40 /parenleft putdup 41 /parenright putdup 65 /A putdup 78 /N putdup 82 /R putdup 85 /U putdup 108 /l putdup 119 /w putdup 120 /x putdup 121 /y putdup 122 /z putpop%ADOEndSubsetFont/Helvetica-Bold*1 [32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 6{/.notdef}repeat /zero /one 2{/.notdef}repeat /four /five /.notdef /seven 9{/.notdef}repeat /A /B /C /D 3{/.notdef}repeat /H /I 2{/.notdef}repeat /L /.notdef /N /.notdef /P /.notdef /R /S /T /U 11{/.notdef}repeat /a /.notdef /c /d /e /f /g /h /i 2{/.notdef}repeat /l /m /n /o /p /.notdef /r /s /t /u /v /w /x /y /z 133{/.notdef}repeat] /Helvetica-Bold nfnt/Helvetica-Bold*1 findfont [13.9967 0 0 -13.9967 0 0 ]mfnt sfnt216.622 269.089 mov0.000244141 0 78 (\(Utility Platform Not Shown\)) wsh183.237 293.234 mov(\(HRS Shown in 0) sh/Helvetica-Bold*1 findfont [10 0 0 -10 0 0 ]mfnt sfnt295.21 288.234 mov(o) sh/Helvetica-Bold*1 findfont [13.9967 0 0 -13.9967 0 0 ]mfnt sfnt301.319 293.234 mov( Azimuthal Positio) sh422.628 293.234 mov(n\)) sh/Helvetica-Bold*1 findfont [14 0 0 -14 0 0 ]mfnt sfnt239.692 137.292 mov(Box Beam) sh[] 0 dsh334.692 43.8497 mo334.692 111.734 li0 0 0 1 cmyks332.067 111.702 mo334.519 120.1 li337.317 111.702 li332.067 111.702 li0 0 0 1 cmykf[10.8 2.7 ] 0 dsh332.067 111.702 mo334.519 120.1 li337.317 111.702 li332.067 111.702 licp0 0 0 1 cmyks0 0 0 1 cmyk/Helvetica-Bold*1 findfont [14 0 0 -14 0 0 ]mfnt sfnt438.692 63.4971 mov(Shield Hut) sh[] 0 dsh466.692 66.7916 mo418.691 114.793 li0 0 0 1 cmyks416.69 112.294 mo412.484 119.966 li420.401 116.006 li416.69 112.294 li0 0 0 1 cmykf[10.8 2.7 ] 0 dsh416.69 112.294 mo412.484 119.966 li420.401 116.006 li416.69 112.294 licp0 0 0 1 cmyksgrestore % PSGState%ADOBeginClientInjection: EndPageContent "AI10"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI10"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer%ADOBeginClientInjection: PageTrailer Start "AI10"%ADOEndClientInjection: PageTrailer Start "AI10"Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%ADOBeginClientInjection: PageTrailer End "AI10"%ADOEndClientInjection: PageTrailer End "AI10"%%Trailer%ADOBeginClientInjection: DocumentTrailer Start "AI10"%ADOEndClientInjection: DocumentTrailer Start "AI10"Adobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%ADOBeginClientInjection: DocumentTrailer End "AI10"%ADOEndClientInjection: DocumentTrailer End "AI10"%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 10.0%%For: (Kees de Jager) (Jefferson Lab)%%Title: (HallA.eps)%%CreationDate: 1/21/04 2:42 PM%AI9_DataStream%Gb"07D0$];[3iCjmt^lQ'sXG=.b4SL?`QfUfnaMGD/08Y*0D/_bNiOmJL9'N"r[[aPis(cmsCYhACaCTJV6.0n't1#+Ac3Dq/Z&e%H-`S70>:QT*cA,=2t%NoT>)k9HsrR!@P!Gqr9T=pI_Y\rI6T:BN_O"%PWQ=5.:QtNI;QVrE5tsgV:+&bo&4nCZ[[G5]3O7NTC0/"%]DJdh`HHD"A+/r.GI*Y&hljL2f)*_R8fmpQh;-If\%V'lIdqB(]A9QlSlBM)Fa1UTCtHkdh=YMi`8_JUmPR<+rdONXrDg\@Aq,5M%\UCtk58O=O='o=Xj*Nne?8MOh^#.#sV,JV0Sc7Tohjcmcms!B"5Ve8g\<1./(=19,G<a58+4aerU4"#SXSt>/p"fK#k'hfhg2D-n%ImN&hf29A2Z+aLX^3$GVT#nn0D#JPMYh^hb79<*Eq_&>OiS.RIgp9lmE"%4jmj^Q0g^J[mN;R;jc_$i'Z8KiB.e'.9ntYqk<"hLB%coJ?*Ed`AJ?1$5h'3Dc^2'H=*$(2DPU07OGKm;lTIN*^hOj3a?B)U1[`?/-IS"'BErr)0GRnK=%q;)%hk&3#%6>8kF<cc$&fWO\W%^Y+,k37Ek]ndi@5p%GH'[WRqk($Dh\*<+Ii03<AdepAS8h=^l*r2Q^=o]V>Hf,(KKlT6BoFR\\bqW?o-Ih9sO>Iic:V=@VVAm?oH%6#gb!Wphq>`OX>Bd/^30Ft8u3k<a(DhJM+dDSA^k,%\:9cW@UA]C4=;qlc$=%(n-LWlE!1o_]4$\l=i*8*O)p;n`1dh<(`4i5uhC%ro(AJleZQDIs$9nX8RKqP6P:*Iej!%qT[9",7$08#'&/@q*O<?k%qG48_^MOKbJqg(*E9YTMkbLLVG$/jBpBon*+Q3FUhL9nC0H\%F\\P]Q`.$o@RR14E>Kil`J@DH/sj,nVEpWI6((4ATm"nX<7@KS;YZ/JVl(qcHA\/hVg*6.MDE@$Sh??aU@rVakKB^Q;2>rnKh$L>%Vl6#U4#d$<Io-P__I&PER.<f@)+K:o."`,j0?0P;Tli(:r5B[GKYM1lnY@aH7/2[[j,.*#$%49][==FX\F:;GQ:p<#q#TQ6A&Y0O%$%K@[Na/8ZfG-=3*K]GEasH[%8n!,BMjAGhFk$7]B+.k+_YE[1.os#0`eV==_ru4AnQ-l(%fW1:`eV;iMb5:Q=7%(mAf:[1R==^s%.=@"qPZ#/*]]dEOH9eWPBtrABShD[Xs.KijQRNTC6Z!jO5/m<d(T!A10g<R5f#;!\_<>K<ABN31UR9LOPe&X[B3NF,#0<'-PSQ#]%j>g5Q.s-Ykm8rf^aRbAOYpo#fQ$_-6[D"iVIgW`,VGabG\`-(_=Rr*4Do_6KBD+dVerI'lSiYS,lHXM/d3!+I1mC#6S)oUjDB8dT%`[#;CfZ::/G]UXRY1>G,j?HmL.[p"U>(+h)oq1u)hd,p4m#)E3Vn;6/Wm^e4WrM?fn*<%/?)N2D\N]8\qJWXcqsLKaAm_(!Bhim&%J*6!@hd,n^g&=oqNk*&7SQEMNGC#PE=b#_SnuNOQcKjS[pNguRjg$odhW&A3hH&00YdVEmfZI7C:lQImfIGP=%"If*+$@A\r+LL`%h-=aUao&K[o,@Qu]p&TZ\>$]Dd3%fG,M07W/F-[cCJbd^mgej/D]0k*?oZj@-:hi.7\kG_%PU'e]9M9h5.49X@Do?Y7Va4jonR[e%0^aO%RAC)X18:"lDc"WG1d?`hb8r9Ni)iJt[DT6AIQ_"1Xj=U?cRZ/K*&(d5JAe=V9nhmMbD4`BIA&*@SM^CG7l<mj]oamD-I;.d%cL]lR&c/@84_oDH4+mogj6)N(UtAgQ.h*o(o!P<g-#.XK<^&NW_<5g2"sE7\'%EY(-Ve&`e-(L?-HS?uE<%eb*LlIG41i56?Yuj_%B&1o#Z>2n`Q2.S'DlF1[1R3h<NO#+RZ][t69=1<$`p.Be:VqgG9Rj[GJ@40&96H*"9:m>3p;\ELBQG74GCo-CpSlg47\fACYM^/F%=.JGn[&qO#N[f,)*R3]/8u]bsZL(l,-.,^O9"'p+diLJdY>;`MO'VW"=0-ODU@Zc!ETRnkFED#%L*t/c6=J<@HCTh;cf<:bQ>'3A%(k)/;e(J-R\X)WeW>J8[Q&8R<9/dZqHAYt2&krDi.XRdc94^qc19-2:VGT@TfDa"V\P'G_]hi?iVV7]\1[kXpm3E!L6*9^l0>j$p%lrg3dNoDcLQq'M+.6Pbh.`]`DUG_.AL"DpiTHq4J43Ae;H:;asU0'e)b^\>JJgK`;H02Gl&XB,nr[,!%XgF?G9rZ^ddju$:mrg7U%_gUf[O[h,PGPg+Pe%]%sC"jN*/=?b].5#D7XMK"UZ3AZk:WW4I,onS<FeNm.@Bd`01>;pi.OD#/eCLoP:O6%a8MIY20+4>e4S+fY%rf@>qIQ1Od;c[7O.bDqZ0X9MUeid0%ArE_=2uSkL*g8d8k5HF@T!eNO/CE+fWT"L.39,)^C=ho=[mFeNY-LLl')9L`%<9tD=3hAT%L6-2O2J,_+E8*5,CA!P?</W8*6(V_S+i?%5p?f)^f=q5Z20on4YMB28f'dq2e<4lL>&D;T@L]\i95eB@an.SGl!#H$bQt?$"7%T(%\089kT_$jNU)n)R?.?nnaLs_H=3"h(EYqVph,/@87a`iql>Ms,*Ucc%G4Io=Pi["q>=KJ&T81&I)t^54Uu2(=GHu<sB.jC2CA'_'%Ic[2<rF]9$Xa+<_Z[K/RrUb$KgP7!kH8Un.;Q1r+d;C"&V*%5GR[2",C;N^MGFY=2SEE-pY\F9IP&"\jrD]<e,JREo-Zs4Ij>?I`%I+E#A9]qtr_-D/4>onR>d*Bd/<e#a;k0W)9Nb_i[4NQ,ejKWH5;s)urIG^pgG\jr$7\FhWf)elk/WVKmUS[j9X*2bT,`8aH^9r`)%c^e(f6)A]b.p6SGEiI0.e6*gtT)@f@,a6Pt'k]RN^<p=8P%W=2o,)\[k9&`E7,=t(Am2ec[<oRH<V(=dD#C?IAh&BZC3cuTJ9oR#%rVQ#nEaZc<(q806W)T3t^L4"JeG&FthYqGKh%$nc,?2fql<-gN?abh>,n=A,FA?&H;J^I+fheR?olp,&4)XH`$]U`?<B>O(\*m0&%i*U(\oT7D)%*Vg;][&M,R.#d\=f0?ESSVG@%dfkO/9O*u,mC@@.1JC&WpI@lo;;2iC=Q,?/k^q=mG.E5E%l17ZZ88p[qRC+rR.'O%omPt>%-K?=Hs2<*0*-Kaj':W,+4a3[EeG]%7\OQC5Lqc8=XWmKS36GB\ngk(b@GT?s50`qc7hkfq)NbUk98p-6$\dp^j2ZUXN>U>%Q.HO00BLRIQ/kidep:7e*I;ZR?J<Ct3EH=:<Z-i5KZ<uEG*gp#f'L)[id!2W8io+-[>o_H4Z<(F*UMJ=m-M8FQD%!uD,?hUo/ao%%[F[UtbcTFee<XM&C)`7lQij`REl>balE$MQ#]4C@F:TBEqt`BaU4kaU^WY4!aYiX:Ftr@/b870\G&g`8kOl-WJrC-ZJU1:WN4G2n%472t*%%ZCNHNK]jZ$LIL:GJn'c>TkiU91EDh).):gul*5kBFQ*m[ZOWdsU^q]mmQBXUMlBDKE5"RpA55h+@S"e`Dj]Rs2jNmU9DV%YOh_ZA@QcYGea*ZI_35F(H8sSnSbsPCjPpBE0na6eX6`_e`LmZ>WpjXDbt4mJpMoO?*B1(DQ_Q/p$'Y\\*LnRpO?<4ml!BHYDVlf%$`@"$]0,pKJ*BSOmk86gKdj.m1=+O?HfRQCjhA7;gYD4nHCM6Cm+>0T'X1pFD=C>9s8;#"LL!E(%C'$kh5rk]ACs=Z6R_r93&q`o%8^ZPk5mRA_ipH0:\D>tU"5DgG]=D)5GK"a78jg<F:9Jd_L3]-)M+l>`k2KgU]fLSV\s#_\Qhf2"c2.+bg[,*Pm-O.H@fsc,e_PYY%rqZ,5EUrtNB#!08q7'dIL-YCL>+Fn+eRA"B)g5,bo^#q2rL-j`67N"GQQN"c0X>!A]\C1SSpg3AmrnCX8:,1M&c1<!X/i:+nOXl'%\Gk-5R&QU(\\%g]#oJnJD-'VFF0f62I9:>$GRj`VGlGTa5e+H[hQ?NXF!#:E%s[gke.^72P1&l-Ka(SJ1%ZkVFh,)2^V3m$fNbS;%^X)o@hZQZpQ,\=->R;>J?>SK$\+f4+Y$Z/;dp9/,?=2"W?G+tH-t2m*PC55')X.tsq<%#t_j7'f>&sUZG-h24FsU)H6=HW>Y)tD<%;Zp;]Tr@(m(7-ge"GK]$?g.L13*4b<.?84IaYV[29l=TWiQ).SUc$+g,n/=3qiRjEdBK;m=^Ek:1JrqZMGGMZ:n_o`Nri$iMW!0=%WJ]'@_YU-cdXr:M.UVe(P>id_RAqm>Z:$1,;@;0>HkAdk)9E?9p>mi)"U'Dccp^m/!FOuODeGEkh>Ne`pq(#6m:Nsn5[#s/RZTn1%s6EeqLmMEeZrT]]4r-UQ#f*Dqd_!=\^#d6jTYWY%g8a3I5tJ)RX=\sZdW$M^j\2Q183eHkA_rBf\2T#.KR4B:m4-UR"q(LM,28p!%[1QW]J2+l_'o>8M$s-XjS4,`%5[icR(\CfW812($Ph>1Hj_YU+:*0%=48^J"cBUcH8P;e_FNp$dS/;8`J0^Re-Cun_Y<hBmHA0/c%giA01j5^OgK9gIC0NuLgCM:[YCM4GaoHR.^Le>g!gh"_k-;f<cDM0d@eYZe7%?Vt8inim/!2^J2.[hIeV9(iebB@!9Ph9/q6\[6]%D+^[a%72@@;:e6Y(loe#6il!W?KTPd%'kgp-q'XFmngTqM0=tZJ]<_S&%6Yo@dJXp05sPb0C"]8K(3Y"J8ru.>dX[0cm)-_!)ugO%ciua'RfGGZij'TMdq7DEB&1UgKG(5fgl]+3=_ZT*AHRY-+GCC7A6"I:Qn&4BiT2I=@RU\n8R!Rt-EIH@OW5LB;$o$TSs5AmKft'U%as]*!QK<^47Y7?Z6hdsMq8(.(5[]:iY=1^'VRB/uQI<!O;kU=Y0Oe,)a>#bnW_E*V<M,rW/u>[o0H0+Qhe4049km>Ejekln<>a"_%77:I7&rd//5rAfZ\;2O:_$MVoV8UMe8ebB!M3aW,0lJ0TZF<YBJ.SdR$7:raP&cZU10#GWL`gUiD><Fn3@Bf2&PfLY.qDdjb)4.3%,+P`*4D55T(`qs7VV0-kMAXAp;EH]X/hbP^<+USb$qsSD9:Q;[Z+,rH7OZbHN)kJudOd]oUcAs.;U\B_&Mhl+.X2NXM3JZq3QQOr%mjocPi5uBY]3<>bd(J)$EiLC'UBHi+Um"/1c2m[&,A;a8W`hDo<)*a#bJ<?rm)4\m19R>IL#b"oiI"toM1$::<'s9E#m6?nd>26>%PYp&ni[UiKR5%kWP?nqI/7u)5#el:u&IjF;XEpF4EZq=1;W)Nk[Zj=m"O8:uoIMtR"ERTi]AR%RHO)c9;pTcY)d_YXaBSnB`?6H,%HRpWAdO:]?!C)fX+OC[np3j$A565nj;YfQB"^l!fs6E:4keR+X!^W\>V1Ln3CgqjepWCm`K&G7F@d#6PgEFMfk$A[0CRG6aJ-fS6%+fH\p-t3+jT[Gj(Pk[e3>tS*H^35@\]F^>=$0sq8Qsm0fS(4#\;ir&aU$.QQK:X[]!,*@Jd'==3eVb>h`hr_eX9,HB,-T9hC^Bk?%4Xa`HhdOjB2[M7l;1K'5'-K*l0>N4)6KY4\1)'i3"Q_oGoh69(r7=E97XA#/$uaY5_@Qu`8r5)0IM5:%%,#Tp4Rj"P&dh/A)tRVF%^sf)HBJBUhXOZa!1tOE>V?@\I('.`AJ95cJ>D+hiQp6./=pqQLW#$W(0U=-8hb,IsGRG@M3Y7Hf/OJ20]mA1:9&pFRTKI_S@"u39%K*oKQQ&*bFOinM!:SU?;TLBA7BurI]r#O!Y".Vpf2=9E.6;&Z:(7S;A)co^I`DhqZ4j?1E0[U-b10-ZQN(c4gdW,d@qQ)Fg-jK;P%MnJc%J5HXh=Ue<_$U#A[mL69Q^)ElM:b=*;#'EZnl.]>(=&C<KQZ7/d(fIS!XjA_#RACTSa_HD@j"1+[LAaO*8hW4A.B'O#*!S%5%N.UJOk5r0?E"7JT>U'E.lpb_O_e=T4:^JBeXIs5eHZd<\o:d/'@+:?T@6k5I/?BIf7[1/%<\`ho1MAqre7G5WVp2Y7OHjCC4C1sX%3^Q;J9X<?(_i1OiL0VUG;8k>&0g`ra)54IFo`QPV!1ZXL*P!'dAH&`8rm(']6dZtV3(E_Ub/@Pa#f`'k_ATQ',_Q0&7Tl^61]f.p%-k!?rD]%$3,U":EgP`juiJD!/%I96("F-f:g^&Oti'nlX#[9ik<3T,.ass7^)W$&h6%Sti^m?Y::RdH>UMjF0?%f7'R_TVC$3Q>h%fj;'.4R#b8VC5X3;Cr(XW79[q#3X@B[R0mQ4Y``j@knThdpAZ,L!r?R<D=aS&)^,?%=&ongKl@hV="sl*R+>`];R^X5p!,&@*4j[%m5<k5`@4]NV/7`+X4S_i#Z;L#i1B?p,!JPC>1\=+1?R(6d3L.QPuNegBFpeU1or7m;:-(^-M&ZT'a.S#1W'tqXl:,9;,*lYEL*9-%CuOW>"klj_A.%>@J.nXI,[F@+!`*;$qF\0&C[/haFe6A%-<cAq's=>nSXT+H;oEg\m5m]7"F#[c#6aNb1/+#dFAKgRclhqVc!o)r%A<9g5+B(]0K1n\,W/6$9;FjlXcq$HjUBFON]H9qE_8FL:;ofEH1Ir^i1DieVD4/Q<AB+nBo@`IJiQno5a?AH7V]bYoU@TlhH\@Pk%9_1je%8HoQ*!A2FINCd'iX[J;CA:h:&?+)-KO-5f-j1LGdSGZ***`sLNY+H4irC-t'rWB\4J3=L/(-O4L3et2>3\XE5_5R>COe[Y%FH9fo3A;o[0MF9=Y<Z;+3ZOmMJcS[a,2Xb0b)7&ATaC/if>+$u;pn"NPgT>caU<qhfitZ]TS3hAS?,YTW]h9PPgK^^F4e,DIfX$/%.eBcBk+=7;_gtg"l$gK8TL0nGMjcu2M<:jiMcCnd!k06KTT6`&'HU,?=W"t!!>q1-G+)t(1.3@he!jtW."M"'!?5cBV[P)kQu-N2%q,0SfhU:qhSg!4H:rS`/++!jXBc;te8!C6IMSUiM8OQ7']4#(iQq6MGEY->B"\7MfoFkqHF+TP'<"()sN"M'?QOj7XYH">:L5l`n%-Z%%lOHn;qRG\l[%656hW;@KB];B\Pi7c'T<PqZb%&?Rnapq0d,UlbO/b>WT$XD2mo9:(Ya'Q7YPjL;^b[qdu/MS@U$7=sH88&jq%J1"VmL.3_k%'^*/%%5U4XEfP!GZB52]tiC'2&\cq8kB"KG$<1!kDHql75-9*8Qjb\<Wa&P,s,7^&K7W9]L/G9M%6.I_F%8Ne4FU&%"Ba))Tui^$C>/LWW_]Qjg6An(WIFpj%3oJ(qeE<(-&b6c/O[^>dBK$6&Gud:&Mbb/AYkK_BS`;-=`gW4'UhB.&0kkOf@hUgP-$Lk%9AsSW3L>?_0^1rF@,PduEu]>fi.S,ZA(:Hc<1?XDbt\e$b#j?`pk=90T:iEjf]cUi$H!Mg(_;3K;2P$N;Dh0r8/h\i*1&i[asC,e%5eFEbOYqc<Q3jXJ5^#"MTSC9T<l@6?Fi$"ilQoOmqLfXH4K-eD>G+MTQn<H6Xg7,@!$lT=Leu(r$8QR[o-SaS%\/7J'V^0:8=C><%F.jKJ;EuW-6<stMhLRJA.%_r^Om!1iAgsD`ak7sh!l,KZJh^`E+P'=WK_[_#Pi>31k!Ic67?hqSk()S*7LTHQ[0ULKc-Tuf$db<#%:r4*tBIom?_V#o47J]I.JP7-nNI%O$`g(O]Xu4"'$O+4F'W'oC!0P9e.]RU`o8J-YJQMVn\@O"MEATD3U3T\hN(/)2BLK`Y$=#'&%0FYd([7s;CO=NjVFtG`j<U$L!gkBErQ%Z@RB1N-%0"00a7S+Zd#`PZN0dm-_@m.J#cTm3Ig&kiUP+oepcJ["qKjn_gTl%/kX/e$>%5i"ChH6'*sVla+'%lTB>@\"(*Em?"1%eT<Kp2UE('SorApApLZANchM6LI.)*9($:7ni\o>f%ju.)72e&d=Lq$CKNc6Ra"Mi'OOS%F%9M17bh?q[aoR$9PmLY,<7ZM5d</$PkSGA6M*0u7n!a,/hq3V[NY#r)WfT/U8^DVOLS/SpGAP'oeQa1&Juo*9g"]Beu'Ld0^SeS%$D4?G=sN,C$s&!MC<n)X.3X7e_`BF83]0IHF.F67d5F#["qL6"<sCgb[=V2NTkd<ljtEB_QPJ#Rd><2',S)aUQ?t;[f*nNr_?Amb%L^2F7C!;9n$E%[<Pk9XYEj6mg5(NI($e#;%ltF&W=/`GjBd-I]PoYEQ0tosVnjY2EDeU7oFT,0O4%.\,@DTf)WI$'2=6c;@-_`?b%\`:V0aWM"B)A3/ER>-(A%X]C)iS0\q.$2A<=[r*-ktA1nX.6u8TdaZOE)ic,\cXGn>`f>DAu#WX(uZf&)VX+OWUMN]/or.AJ7Q0&%-*<XlO?aD3-W.Z/U9nKh"G@YC)f$(&N,0As"b](!kHZ,]dn&P-AIh830=eGkWO*#t2M)5uj6gmb?)-^8?mhQJ7F7MNKoA^%Z,%tE%Bo"PVcK.%LX.\kC*\Z9^LU6%SaWe#_P4]r#?U3,icL;aKKrU$[=B=,#F-.7X<]nW$h4"E)>W4iC`+5$b_P2hu&oU<JPZ-p>h/!@V%&40QCK$0)ekY[!DUgg)L$e0^,Ij27$Um-TjOFg_7i<!:Z;ig6bJ<W<,aT=bXR_Y"dn6gB),HAumk0RZlGSqVhqF=fE+R(,@%+!gG%>engip'=[X2`+d$i):pnP_V0kk"qkOeC04%NoWmq4\b@!.EIp7G$:H&l=Kgr`^(])QU"]hKfSSQ0jVXX^sVceAI?B;X$2()lV^n,%:O=N-?FWU?]MdE<72o9EITVVLp#-:El3g'e1nft&kFG7!E;#:C.i-J_%7,nh3]$t4N8B[SokK<m\3PTo$e*bo6@=*B;GY4-E!_hg%U:LIH1^2:CQ!P'UL1>od6NL9+kH4EGFIQ.f'#kEQ0VguR+-^<YUqo16P=1iI.ah]aM#d`;![Bs$<&@uFog#>t;8k[r7L^D8\Z9/'%qTLXt(:`Q@M`dTSG%:^&J?VVnAgV4JcUAGe-8c>SBq>-)+BdsD!9sVYY0^b^1P4c]^n@1!W\[08H_aD*K*7.ARN@U9"pX(OLs2p4%YAG0s=#Z7$$5Ajtcuh%NeU4N.ACkpYO0B!cAWS&U7[rrgU_/Q5CmSpZmt*ZS$RcYJLl4psKU`C10rQCWg/P(BL8p\c^$`)aB"WjK%:e,J\&-+]<'h)dX-G=:7_Fc:W3_`Qjcps()qPZ9I.;lr$>U@@h<h$sH*#rZ`d6Nm"#)71RXXgEu$=j@kd\54>i>7<?K7/WZBqo[Y%L:]7G8k,jgoh,S%[05h+_$eXgl0]YsM$'N.>s^pLVS-/N$UKXk*=*#_XgIIqn']jBOJn(\eXAYMc::X#$pB8N9@]jr)*i=YWE19-%Y9ma1q$PG'V'8B1.01XV_]97!j]GfD]7iBRLbln$]&\SI\5cdFF%I*k63(hP;3KJj>-#b>=A=k&a5Je5UCb'b7O\ckig>Trf1YAG%??!YSCEb4-%+i@o)/0a[[=:um5WQnU#"Tk3dY_)?2gt1[f$=Q&8&YB.=/LAe']OrTcluR"2\QjXi3*?84`#)IL2,qg.tEKZ\\cI>%gVn"FSue[iK2t8b\7SdiSRZ%[Ma_'T)GN/,J4LQj/+_=#U_4SoQf-N>VS/uA`t[54;0!nEi>,G#YL--:/2_HRWtFWm&WFlhb,%.4%6%@EukLF/pKS42PHdusL9[VcKkm,W5Tp\W<"X\#-]45lr&Jt&-K.SP)li7]iL)2d$6M$KhadcG9/$qnR[BJ"Yh<gF>/QK]&8)UNZ%m+:#jA4>uh<&Z\eM^,?342H'=eBYq6jPV1rZ&8j1>"*&(MG,gm/bM5co$/<jIb#kQ?'/aWP6G,9fF4Vki=eYuQ6P<5*;53Xj/.[3%PX.6_7P4,Hc$gfB5M$6,RtREl$PjYN[mo2FVVRn6HD0i7NsS$g<X_:G&%biY84scHbECfjT5a:\$F8b)[j_H&c#'A;$6TgSgFB"4%)cS0Yd_V599S,0fbr-<r"Rt<R.89$jfIa5tMXD`K,TC%:f58R>7G5!M/LeZ*ePRcEUUj6$hNl@@NE4X<BNo0r&D!,oAL_TE9]N["%8(P]f(:MTL2,c-p5PA@(0m(4[=tN)>-.ZlQ2e.PP-e:t"D's:$U.odYdP21cUP>.1L)A-bW*pHd?+PM"3u7(#1Q9+&LLrc=?5eo2%&uMVP=)9$6lskr9N6?B0:R_.F?n!']9-Qatm_Jk,Muh<&o51-,0Oe682LJW?WWRqhaT`172;Y:o1nq2_.q)LXUX9,S;GH0i6CQ;3%0LVk'Mo']`VB>LG`LVb3SE@V6Au*5)WDp2[ej/du4-1)cfF_0"J?$>f^o_??m5hEJE66?KB$4;dVd7,uZrCC'-/%7g`0'.n=Y/n2%Opn/7"%^T>2-5Ae^+Q/R-ubC;&ZN5$'so'NJpqO7j`KfB('BN``\H7A<Mh\k8AGcC`)oBreoNtSOY6'@7j'kVT"1Xn;sJ)HEj1lc%77DdB-4+,<'>gFX_Or3_`:+t*B35\DKXT5R<#sTX'ru>CEjT1:G7[[Y/!Vdu&\(CJ+\+(/H9/?.B$:Qm\lSVu9\(Sc;5>4ri]N1(%n]_[6>t(E[au3_XMUj9=KQOWh'DlmF>7I@T:?AJC0;n<UP'mEa5t;@gMb1/m?oc2F@L<c1IQACjQPqt@'GKsE_2,`nIEb'eD'LB:%WD>?a#bO^H*kbX=h@.hLA-d#1eJtWU(g3)G^]Hb8ANcd5%9V1-rSW[TV@d!e0B\l1$Ngi]7%@[YE7'1T$65g"QAZPi@(;URXJFf?%=6W=6/M&2nE(m+2+I3oi2'fOl>#6!3A&^qL]\6e9qcqXYEm6>\>(Q\k\6o[ZL![3<2qS59MP/q*CBUA"EeBkg"X<fqnrAMgZlI#o%e]mJd2RZl;J--;@0s&:;m2-B'(=^>[WXY)r)BLcSFl";MO.89Z*VL1T[WDn?$kE#$'ac0-gc&lU@FJ&')t*^W(XOcj\NPpMLEZ?%%U2[Z7ED7AbQ!Y"kd*TD3A4i#Er5:VoH`DZB%NFkNkpmgc\hcoR@k@`T.Dh">L.=*k'hc[I$0_b]:W_]gL4YsK&ZWW)[/+P**T0p$%NidB(bZ)8TMNo@;fr!2eCK6^G/4N_(VOiC]@H9H5%IE>R.748j0F!i5Kab4VK#SQQ<aU[#>B%M,`>)ir7n1Dr7l:Bh8$m?AqhGc`%'VJ@)<7aW'jXtBfh9q0tQ7=(/h(kh&DF1WrI="[3O0\#HXO$e!W$8L;!SbDp_O_N='/_!]$5).57*SO@b[Kj2"#VF=kD2&R/48W[%hQ_2e.7[#).<n&_ernQ'=.++[Xj<Pd6J'rMYoR[c-8k;"cA*!)/<aS(V=U&h@$Q;!Bl?I=JGa/3_r+_PE0%[iHoId;4W'N$_oooo%OtC%\coh)f$0Kb+dpT<hp6.Iq:gd][ZJ@!W.g]\3R`]'2Z,C5FKWdZ:-6m>1KK!bB@SiFS7Fk)FnPe?cL1"b6P\5B.p(n"W0[aUD%5f!RkP=^$`-\BYT/RKcWUE>p=5ih,,CL,O]^_'0\$5^#nR]/lmH);5'Nk.e]@]DQ>VL8^Xhte%;3MMCq-Cn>W7mY\+#!O3M&I=*M%39!se1jEQZ$UI9"//[P@q$P-Y&`a1]!+W$2Ou^s]83i<r-D-6uV]gA8^d0gu05qJ^;2eB0"KAu5L9G"eBF8`WDf[B?8aI('ESIr#%"M!$'*P=;UGMF9i2uH[pbteHsEdq6A0-%>@309i,+C:td]Ap([\aB22LLjbB10R^Lm?<5miNc90>o0[U;2)oeY:]?GmVl:O!urb[%C,NP&Idd)p>,G\9XX05..PU)Le>Wl3c981,(G)%*R9Z^8P^%htL;PK8_31dTcW0`Y)g3Q-ef7Wq5_G:p<C3kr6.6Y7%P%S-;DqOT%g.I0lV:X</X+Z'N[>H(P9g(eC\8S`8W"MtHkL#(i9iWTe,Ia&#Wl0K8;\bY"@"#nXZlQ/cL]S`JQ;*YBJ1@VJ:A'7MnJQ*t;n5Lp%68fKW.NmGXb)r)ae/<fnX5!I\WrUC.PDqdY?:A=jJFPe]E>9\U1fl\U!K.*):K?@Uc;PHT+0QmM4ng^%h:@'PV$7`h9U_ZE)-3`7%-F:_]6_5/=T[\m$(;T(e.NYl\%0V>H1SPKp![ud,3]bZL03Bu0$,)a85Eg.eK@3)`kLd'YSN'ot&D-NH;?O4]R68Ibad$=El?]HC%3&Kb0`HFY6"M/Mq8d5@S0b5aW9WDtXia#uG4BV)(S8-#D<iP:K9\>Ek@%*m)W`-=p;-0eW4WY>I9Iua7e[ZTN\FA3&2sq#/'f/4q%NZm[SG7msUOAhiJ=Z"Yhc#j^>Af>rfn!I6%M@O?6f.aXaOEq1foRJlg=Z"Yh+-),7+!Vb%;oQsNES3i&-E5sYM,>j"dPB@Qb-i["%,::/u3!.H7SuU"c,$SA6^+[Dj\U#/Z+M>iJ=LjP0.]95d!9I4X=HO^H'cg9_9ScXg<Iu'f1;SiWmu>KRgXj9&B$,Y!W_BW@Z4_\8%])q<+;fse+<@1h1N3B79Ego0U>m6ErARZCjOLm76L(X@$3Ymo`ARZC\0@qZ'WeIE:d?V];<gd:5Ap^AXMXY18/D*YHiRFmLe(Rar%$UCgW,u8,nh;%31Z#4cpqUmHJ4DKV3q=Hk%os>6BodW)oF'8N??coDJq5(0BIOXT4W@qi9?iHb#a'Gaf`Wik,^Xk/?_#KL/ofj[a%HJeGVVZ>hPIL,GnbV^btIG!r=p[W:8/t.%UmS9Pn[QL/*Y;Y].H#eBia3[UW0@s:bGcjfe=-jHpouS<M_I`%sDf`2:anKY3PnmN-%[?K/&k3hg!qX&J)o?"!_U\.])r%^4FB$K#N>-"fQ<S)*<NAeQ!17MU<9j?b7c-K..>'?fTGJ1;o[d6aTH-i8r>4eL=3]hV#b?h=-%]j'Bb>R>rHoa-<5ah;Z4(8JBH?fI<iP;a$,m<X86o.[#Cg\3'nj*Gihok#^V]&Pf?db<4X=RL(umf!,Q3;.*8]t4+26t'c@960T6%IX^kTrH<>`Ib&,e$E%6LDB?AUq>,)ZF)q4uQouCRbLbS+e_@Jg,t*FYp$2PI!TLR?Y`eq6qd1GrpDDuAm\cNfTu-3^R`XsbSLCD<%<+p'\h<nfoa'cOnq7L!?n+PN/gO4:DQrn:9Rp1jL?ANcQ1=sX8-Xo`8o912.jQ9'"3a#h]6:)G%ZdF/qD=XjQf?C;?LCFNb79YW@%5I[W$G:T4]rFY3R7m]jdBjp0FS"-%^h8l6&M+I(_\'imr$:Mc,mWe-Dl@.OjaVu\?J%p??(G_DLb^3lHhFl1[3mLq0cP8TMC];q6%P5VsDoX,J2<XX?1CG1bI>:oBYQMA2ObkLtt$F=l)^H(Q/f#bF.?/C.pn((ZYF\/H,[T9Q&S\0H^H+1A3\DFA0p;2a"S+VgiQRf$o%H[3oS8&Kh'rUTsHHMpk67sWbaAndQc?PTb+'<&7*?Cc2k4W?rrlHB4>Q$BE-I<kRkL>hdJHe%SL*dltSh`l/l^MEZK87%]tP!Hja%BI>Palb>Wb[W3$W2E)i72uAY!G/m"TJ4T#!$D`@pCcMOJMq$Eu<nj\"gUAOc[VHr+HZFJB]6^t$RC"u*(7.VK@Z16-\(BqiWrb$,%'+mOg?n@h=XDXlOcO#K+4ulhcpF@e3,dn;.s-jiNCM\SjiN4f^lPCYHhs@eT:\6[bGu1l^(,S5lb.u]6ZTm<lI'L3G4oQHe=Mm=O%`hSr[s&/dZrFWhDEcuC4^U%#Jp1OEgCq3fB0@,r^bJeM9CmOb">/k,UqP@EMV-0,IbOb>sZh)Z;`VKGE3Npc0o6;>%rOG#!kN9E>%>FqCXSXl=C/^EKkbum1kX3T^-3:geNbao]"#lO>mo^)5BFE'?+D,0EGl85)e;h+(-mAW)t(X'enibWVG==iTmAl14]79kM"?ateq%Qpj$)0B_NiZh`j50qZd]Gs/@nE?=7kmcJ\1k%1l8cC;0&Zro6WVJ5=mC17hphmgZaVCChBI9rPrVtHdUf1fPslDfkeW."&J>FW4*%QIU8'<h39LC+bNK>uan+6KK_!fud9*>fQA[(/Ns7c=7OR=N)+Eo[/MJBOWt0bA\NJ_J*,*H"]MbWY!/Bo>(SL9ITkfTDLEol5+p;%)diKb7kY@AGM[Z+9=K$+m`_65Kq#]oeQ<ZF/i`<iZd-)/0($24Z_qtTkI.Yjrc,<]HL%Z?ioc`+3B(U5e1Ai!1d]<Ln3ete3:Z.L%ae+hROep8j\L7ViV2VsDV#XOggEhlbr4ciTn\setX;[1+d"P?=Gqo3UFY@BI5;RW;5&KcMg#>]i;&D/hj"u=9\%WJqr3N?&h+pA0%KA2DK9-I+OY:2^t!B(51PlT^_+;Q`"1E"]ji:K_o,P<hO-mPo!"*;;sWF4fB/8ZgQZ@XMY(lPhk$2PQ+j$M+<->6\r;G_05eQu&n%"nf:I_-H-^<9E8s/U]'hA7_pVbZU1@X(;e(17+moVrrLh$`-P&Q-&_TktreB(*]+R0q8SJS;1Z,KhAFCM\iCM69V_Qd9NX7<2f(E%/uqmKbR1b'Tt4?+1EjS(89#duGp]>tX@j^8/*,uLCnm)1/Ta)kH9N(T5-L;I.<KH]hS%9a'`,"e&*C_>Vns85c#P]qKi+p*N#0Kj%_EbL_dTdXS<#FqK^0Ho>Bi[4=$g0t;^fi^;/f]-dS9_hNSsI6m<]JY<kJktc->_HC4"l8hc\0"%AToBcmY't[Y^^drM_(6R9K:":%U1_[@;IkIrRGgSX7$/Y#aHF*TPZ*\rkNC%A;C59ENaQ(EO.\lD;'Q-6\ea7H^0D"r;H?(e6!g*ZAjL/`.(LJ4)Tj^(Y_l<eE\(%Q%6(0f+1rqNOJ0C47[)Je7chMQR0t3gSK<T,>n0%9OMEM6Z5iDt<k9pBT"RuTn>0[E+3@3Z&V'>![K!H!:&O/$^BDT%383n+A/0QVd%74*[7I_`,0)9)rd:>$BngKj;]:2/EYU-b_XPcKnIJ^P;(ePX=Qb2NZ]^RPmEk7kI>'YC:-4P2[5DaP*F+^@kU6PKc_@gHU8Ta\2b%*se&V`%qNQ7._A91^*K'_A_FFTu_u8Xsge'\c]o1"Lt3<LD\&BACGS=M*.\05GMIJ<Nt*kNg:G`,snPq<[*$R).4OXXjIfE;#,ol%1QZ#M\\COqI=H=E\eai//nGbejOlr`5F(Y$Q0s.-dT-5qMKZ7Q=;Tjdrb<t%3gkt0@j]fWWo/B,i1trHS)Wr`V`B3RQ9!9tM2?\/%W]A`GF5<>Qfthbp1?%7BDeJuUc=cO?5<eIq9g#?QE9:f'qSsr_n``7\J9Lo.ZU[UF0d:k4%"o1Xj_TM[`h^t]ppsH9+XqP6k[i3'%B1Yt!W_d9#l9Z5?WXL\Yekj&RRR;4QBFdDAWXi)PW^9[AW#AN%U8gVHM5ZW+9WVtCeL@Lu<3N64;;Iu#-0lAt0[qg$Xd?Eic=g30%Ai*d3&fe9<l5S85e2^+dW8:CrUUit'O6Rh;5h&*+UkVh\W@FVtP+RU_!e$j_M)m)"-.PYgR8c,EG)A(*W2u^m8ZA.V7A["VQ'J@"%<EQ9,6tqq0UpX0?/S7sfWk;;ZW<-!5QBYM/)CplRmI3)9Xki)c)K"IWQ('5F#n(X8s!_M,)?'?OdEs<C-XEP5q.dZOhq`Cs&M"U*%lV8t-qk?:Jr(;tdP]`ti.NV*2nfcbVr;#:rDuZ:Pru]A\WURkKMH>9VM_!rin=<g1D-_@pBWek\IJHEgchG?3)n,ZM_QYC9hoM@P%k<H5]&[!Y4j]WU^]du#2U+9no"tUL!`^(bL@:@Xob2p9gU;7h]_k(r+6.$O0lTmOC*#(/:gg88f*(k;!*]"95GsB;Bc9!"<I=N5J%*#,F.(c=<,(]Af+hM*j#%K8_*r/3'^qIG&aJ$K$`?/Nt'^:DqqFMjU-X4ag\BC!%-L[G'o?PY"o3rdIkjMg9XG.Z$gb2V/Y???!`%#/Vl(Q[U_0nA-ptO9`SS5?uH.T!&:,ijZ8R7(SX6!L+1=i-fd-cWAl/i/^,cJ&@TBoBb"O>Ud6o!;A-c^OE\bNH1Xu[P`N(4ZiVG%O>;=Dh`p`$2u&l"]ph1^k.g1UWAjWULCS#"%A5a3VoQhXcjD\,N-$.^!LkjE0\-0^c-.45Fc24O/0jBg]T]@R`@0Z6qriS[G@NT;%-,LlOknU2;NL9]d7H\(u!$jq\_'4@u^`8+3E5E;O)5n%@.NH67%Umd7mYWEM&*&bD_!nS,'#@sPji!O@,FTOt_._!]@*8IVVM:67%;.t]gaI`QBNl)-m0SW)K)M1qB!DI)6PB'KXi63O+pV?I/g\FF2:KPXHGVIup1u-!bNlO1!BR)S_E]D@^;.^I)_9t)B*uH;V%\,3V%:SNL`81hUL?o!.t3elrfF_K"k;63!cHMIJ4EBC2JnZ<Z`Y&P,6CC`FL`82ai2e$&o+,Z7GbNS^j;S\5ZM?#N]V`g+jKR_L?)[R5[%C<VI]O?"0="=nq!0ba_c%Tue$E6,&&bc:sWh*^Ih=_.^<!A`^=L&6Dhc%HYe>T`Uk,'=1k6#1@)N,Yr#6]knKK,ej_kB*gDE?Jt(%`.@W4"^=/",?boa:0KWA$Z*fsLYP!@)U*kNkYLpB+oGb@S7U[;-DX"IZH[?MSU<C2I%N`>8#%<e8J$[(+0(qeWIK643Z8/N@lTF@%ZK_aJ0POaM+<<1:DX\4a&RTZ!E!5>IDj_beokf[qJoEM+N)$5ZL1/-_kiCH**,]d>ST*m&$"_$W%5f1u+4M`17k?Th`X^?Mf,YbN%*LmA)B+?n>Cj\>WiJ/&,_\e6C*fWljfYf`Z73;aiP'mWkAk\+m.5HL^j2FA9irIF[.A)YKiTrODBQ!I9m."L+9U'8lVj)OO[^u?u%-6"LsT4e+L.JeG>3dKDFq^!<MKt)2P[rpb!ZG8]a.[s<Xl%U07o=q,<C$6]2(H5[8I_L6go$$O\p?S3W]@euX5qZ%li*1l3hA;*^%L\phbbM>q[ggPd+86`pJ]7%Hd-i9"2O14"(oFJA.if`e*[6/id[Q[RKP<GG=[bD78L2JWA\s[g"p@VPD:Nj8'Y3skH)n^$kT10$a%A937ViLlOdV*@H^1/Zg!c..6sN8A_3?#2^cbYL/EI'UArmS,9ScYl"K\%CDO+PWF:buO;3e_TV&blYJcS!tpr^_[Li2WST)?/P&k%V"T`@/%?/NP+Q-P`8kRCb6OQgY/e#d50<Q<=1m:,Hg0h`UYc%?LPnCbY1C72p:jt2Z<n@p])B9dp@ItN7LC-o%i4BD/:Jg4Vk8H@%;*^g?;k/4eI1@<.-b_c-RI^lI0a-+orTZuTs.9P3r*o_S=P[gpDmnsJli$dc!Jpbt)#bbbnCt+ijnm<rl>D$6arHL[YFrtQ]?Qh#%4TPEi+8oe6QET^X#fhNCrduTla[6t5N&mR9o@\W(\UT&'E51:9s7VSl4dbVdlnmcXN2M:=^A@?+iSepR?gHW(L>P+I*</;SOKf2(%rfIK^*3Sc4OZYS;5#h2F0d_YBmdeEke`XtsZb(Jk$ic&nbL$9=8Hljo(AsVhjbZMHNrAtE:]G,In:&![r*MehE?HoX%sOB+"g#mS%jd:cFJ,CjRf(ieqgN)l@HF<_%;#84(IJ;F2*4]SG1&7(Dk3&_[nE&<K%Oaen*%U3$AKsg_O%8klNS!DY:NT<PN"[jo?),QXO,*C?%[hmfg@f:KMmG3Lll=U;L6X,@bs/R$kGQ>Jk9e2+cs6#:5hbW#)3s"5s5#?n8I)fR`2ugH<<d4F"]@G_;EOjilmKunJA]*i?-1RSe%bnJ:7BdXGG!pdmbg(&YZQL"YAfs5Nc8p4HU86pJS^K]OLhlcasY]R@b.df6F9C7t3WDW/.Fh>AOLY!&@DWoIl3:nI&2&,o\@?8`F%I(-t.j.!fg@.E(LI^aahlJU]o]fLXFhnT1bNC/$5'-UjX6`T^EY&62=#LKZ_S,7i>ldbrpB`Km*EkApJ%.a5G`Va/ZCZ3E7>ILId%Aasr%@-W`Ejc7<?5--F31)Fk0gXXR1(l<kp]8&OU>VGg:TD),3H,%,KrO>$2b!G"0mH.I3)GuEb$bX9i]D5-[gUm.WqX284fR6lZ%h'+V!5:2Sj(5L-1mgk#srQ!o,rF*B&OT%Ji^OEo.'8\*h\3I`WZbDlH\+m\TrAX&'T.9`tiQ_=Ic]X2DGPSIZ7pV1@rXKXk2P-gZ%%*.tOh:p1trTTJpHG@"<Iou9N!9%sBGI>.''4Z%Qa5)46Gec-p]+1m\k(XPU]4^1_218T?gQsjXa5TH(iXJ--p6I`l<Zfq;m@Lo%%VZ\(bk3'mt9[6!M0&FgDYqY$o]!tTPZCas-hg^&$A(%ZdV<i,c>$aj9H1Y[&nF`k6k1Eu7e*LLt0'7Ah<UmRKhPG(H^RO)Q=<@>n%hP4b4FW>Y!ZE9-s?/lm9?(Phl/Nt>-JWGR.<rkf):$(KJ(DH1Abhh9RiaWYkl"fIB]q/ZHR!h27MJ$935Q"*m@Y5NI39Rj`8"8,r%1R,p4i&J]T]H/&fp'=/B!\qtnI2%^Q4K_=?QKgHfP=X<=4C<ur+10?`n;.[*:Z^]L(DH0JNXC]62%R#SY+$7TnBnZj$!/Q>Eh9=l%%DIn*F5ZS.\B2BgpL9l1N/n0u70!g%fB-"N`*B#qG'f2B7bE/L[eQ<jA6uEc1!uT0;997+fO"([*BkT1SelkrH+&&1N]+)m-ao/t%HW-,R4ZGpu&WYQPp%%J!8)^D-%1Whk[[-W&V2q,o1l9h+fR=[njr,$LX_@1n3)i2SUoC+NkZpZ/rOH$OrX%K5(K/9C"h#,^dUUp&%G?d"J09>:>+1h`t1m[fSD"s.K2U=gCUXY@p)QRsBR9.ooPPii[q@,=.J!Te#I][c%b>sAhJ/nk%0I./mI!f`[T&=4@CIMNq=#J%n%#.``jiTH^YZ?"3JM:R2Db\#e<%75E8N:d2YV9-_Y38Hk)M=5%`cX%jt.eD0L<d;4<Qakugf-MRT_8\K$b7;RfCiPumZ)K7h<=96!%f!sbU1\/2@r^A_oR!!ZTYD-Ed`Z5%f-s0!\/?)<_.G^<[\Aj(bTP'2/+1b@3m<MNcjPV^&l!fk^i1_nda\[f)`f\(\*`nA7%<j[>%.7pF_%HN,^<%3M'1\#bk:2H(kGQWKE1gm@Qc!qgu&$b9M]h%WD-6ZtaPLp8GN(6V5!'1o1<J5iYaq'>2I%OLj_4T].0S3JuZuFjE%ZSLY;Aie#K*g_uo$r5mF\ec%IO^+Vg"QsM+h)`KO%b]Z(:`H!s.20\\[bE@?'VdOR(jQnB-nAB3(q6=QLtLk3/7j)H4jP2hnpJuM%AL6oS/pVQ%OBY\i6oR)R#,3*pPdaA0>iHkk:Cb2Q,D(6&mtU]VN]iFg2PMckcJa.*_*E_'^+`>F&Q-[T9R=h^i<@P'f8Ea/m5^FX%,KF3o35td)G$ujjBW]-S&L(A247NdZafM;Zn:C4A]M^YU<FOZF'L=EL2f:ZL,_,;Xh6/f#eVGh+q5&!1+uVC]AXnG\,0KC(GEEY#%94TMFppK'8p0R7/o=cTXX;)f7OfcY"j0A^Q5_t"R0jV_SO-&!hfgsi;$.U64A<8d2"F@`!nNPB%<D(Pl=e"T-)!Wk)_ORuoUG.">%_B:brG[M]:-?9)`HDh7u1[FUb"RnH&c86.4[r.9TP[]$i&*nS):&$\r,NRd.%Lr95SXpbSjpB)[4OgSLd@S'j%S;UHKofpt'69ZM%GLCNlWO"9'23,-3AVjTp3+1L+@b*D/O/7AYhKjIU&bXON4L@Pg%K*fMBS'@V_!PI"&I;cu80^lB9[!XsYdlYbC0DZ#,I?hWSd1Vh%Hm2(V9r0n[8\/B$eM8096qEP)5d->2_WbBL6YYLjJp_YLW1aq/3H$u&*4@%^+AiS1!gTeB8>?nphNU@Sl$7q+q^daHDY(<M4=dPF%7[^b]]J7WOHAJU6Wb>']/j`RL@GYG-d!+/Wq41&2+^rDiF9Kqj3@l)HWc32WcJ!GEK#+J/Ju,K9W>olEiA#mhitGR4j);62,&0B]%!ec=G((TO)WhnAc<Y2;%H5;G.X5h%a;gD9-;nJT6DbF;1aP$+uFjo$+5m=\QOARo9[]nsBZUBdt28EVif6Z4UQ^8-s,8/"c!I,8\%)34(eChh6u#Xtfh2u&d/FdFEQMCbF./atVl4dhQc?B!X5!A't^iD\/AXi"i`,CM+Jm<otid,jqI'IMl)92g+ATB#XDP_G0X9,$h$%*5W+b:Z;t#8NX9%1IdW1g)"a7_U+ptbB5Hbg/Bt_WX6IL6/Z647(W!F5`qYPZ"c&V49OKi&'$\qQg7sO[&7lqA0aK&6!00&U(4XV%*HBZIFajmSN,Z;4:4'8J-h;<6Mi%.l5/^Q[3$%WgI#)qYn_sfGdH5SYi1a%YD'-mcdDr1K2;7PG2i]G:PWj\$83Bqa%nFq2odP':%#"GK\qJ[F_7lVXYE'VM)E/=2H17r,=D=`'1.<^,F=YlW#UXN(eKYo0Ul4`ajULHKb.Ao[s*I]@+H8KrpQ=@_0OmsiRp9<7KBFjtl%2.FR>L.p`Pe2V>Ai=JFjP2r"M7"dqZW#oR"L@;EI/74?ipE3*Z?B!X]+F"lUL.j=WVbhAhe-"]H3^em[&Z50r'/H.)SW]e46t(B7%Eek&>lqK9dUWr,t$%IsN`Dg.SN_t/GXF_B4:&?mi6I[=Ja?8S9rOcI/;m<ZT*P%-_;`I1hnQ99h<T'cK0hK6+#KP=6L`=`F!9:^5%fcIT"bh@kNWU/Ya=R1td7Ll4^"[CtWTBFbY\`hcu;gGA1`C,%koCL!G7&A?^fQ!u%0c@VY/uFG,C"c9k1_Q6t`2%0Vs.U1s/R7m<%?E/9*C5\/rFR!QUe`oM_0Hq"1)?a_YcctbGHBDkG'`o%k.PKDeQtS.j;+@<hY-OK%7f[j>451[df=`^;o="30[kqGN@6-&A]bn5E%JKX$U'HSL:-s=B/.ZN`iS;3tXX<Ru<6l)5'19[g,1!s<^"!<2i,<$2OGm3[ETr3L#)'/,V[W#3"D4[kh3d]W7MjZ2H.*83/ET_)[%877cS?dn-KT+@bfH\=6>GDc7[E^NdiqT!cVTfn(CK`4-[`.\4Ed..%YWP%$RFomoqm!]/jKKOtX!@=9:8.Pc7BoAApD2LU`[F'CO%E^0+#4H1HC$q'5*POcY8WZ*#:W`[i`<B=Vo6mMXQ-gk2u"`GM,huqnc*WiU4L`F4i4V-!\_[M2CQ6)"FOg<#%))r8m8]24[Nth'(%<iKU]F2oM;E?[h403<sbfVsR)WXuS6#S.M)Qn"dISCr6Pdl!'gkCa2_fr3@_*m\tY4:i&f7:`0']P\odMH`,K&>$$gaD8\n!fOJ[%!8B7D?JCsbp'[0S>Q\lMZ2?ipU93#;@./%S255f;#"S#?Z%3d-7Y@?uoMI'G[c>q08gAB?lhdPY51>)Hg7:o0Xa)Q\[!HrtWA]BO%351p!$27(#_S(O-f/,f@oWSo9NXUuuR2,pn;Mp1V66'Ia<Fj#XEEaKYpk!2K2&*+\A#uc[6I=@PO-O'k7VuFFXse-B^!s2*QK#hS%9jtUL1L3/D0En[:]U!As)QR9VH7d7cD"1+W]G!b>lU.loS6o_o7jh:>+ckPF`g>Cub-KBMkJ><]*bYM$OS0a$J3"ssl[G-JX@f#e%R<utfqIH0u]bn5%5nP@*0<p0S%Y%;uHdNY7_a+U=%1\-4LQWSAFm1/?la&+p7anMQ#[lVDA,Q[;02MB#H_$IXZi\/?^Q-$4H(l%q%h?L#X>^94G.obYn]Nk2?U-4r323r)%#9otbTs9W.Ee#'_FQZ>s?0H'W.!"1QQ^=&51p/#8fadRBm;^ZHd*k6AoQj@@&I0UF4UN5@%/&E$;MP)A^,S#@mk8h"/]c<?&Z&"Ug:j?bGnoS&ddCMX#7*gd/H-\B&eEE#`R00Y,J"'MTFS^SdKZ9G#nl";%M=s!f?aL*i\mcLN%QF\pXa+j9FkiHr87d-W4Z+RNkEI7!%+QNk&I1-T6^D%f.IK(q'oCIA;"A`TO?N.Gl5QPF<i[5s^+uVS`F[#rTk4Q?nW^%s'H4bs1%HO>PTQmguj_'-rD$j1'$Wu#Q%.E*$YWOuR8iNT_J`'Mn&O#u1G<#s+i!2@a(Kc<&U:#tt0bu&fpLWCSXir!I$U5.AZ#go,lek<oV%S!\TS;-k&X(q6E,icP^h'DOO,dfFGFh)JDL9]bs;0uf@8K.G**3o8BdCoZOJ0!FA30+I-Vemr+-Z(q",*GN4H&WW-EDMm>rT]gjA%H=j,8?jh^DhL3l7D,k^:gaJ>Pc!*8]VI)/b2A[kfQF\e=G=k;<6<EB6S+;-IT#Ped#LKX3WXWg'Tr3O69-lMc_8M0=&eOA6r_IfS%Md$j@>Fba2*FjWB0`-V`Q6u+cNZis,"NWn!EBJ(1&"W.Tfs5nPKPNGgDQ/A7@<,ICA(ipRC/G*R6R+Ic&#bU1\g,9Ni1?"9/l/if%)*D]_ECVjkQfkn2V,1ahYtcaF#-7e6_0@jB>/69O#b]^Z"79[).#QguPBf!;@nc;/.0cim/sMe@Ue7W3K=6]_&Qfm&S&nco(`Cmj%3b.5)6SF/Q&6fYd@]G$,?^nE7:r95!,=+)Kp$$S_*8OYl+aa'QUnJ2+H_Q_sa\@1N9?lMg(?gOD9(Ns"_;.jH$^KIeQ"3q#?S(:I%8r8EVCOYfY/XE_>:<X\CP.Ye]!`g\Zi-(*n"@Q+V[H//,X=<p:"t!pff=_V_mDVi[jQX7"BsD*E_W"q<SrOMIpY;JX?o<:lm:4d:%On5g,0$Yg-"Y*.:-^Q[m8:`s?S!VCGhVJo#"N802)X^Wt]0)31<Q3$V0Vs(-PBj_,`C,%a97dX^.u"*n8jfNtMPZ%X[N\$TKXXjg%<fPM\@lY(n=BCZ7MN:?L`@Aj*R"piM0j&*BE31MV;nJo46,]F1k;9Uj@_B(pnQk"0^<&PkTKO[5.+6;d<J-&Al1a:%jFGP0MB=3m%_r@F%::Jf]bKAGM4M')Y,$:Ll'&1DQo5`ZFM>#j?H#+cQADQsn(IJoIQE7ol%_IZjh7YqU]oCS9I?sh1H)^5N7!jRh]Bnb!FF'kr%LBg0a[T'9uHellO<Q:OFMQaRb$ADL'^j8"4/UloM1:hk,HkERtbf%*I0Qu9uM]2/L0o3g*@"ZjK?E/?,d2p:G!%un">h[@X*32t@%NU;#D<+<X.]qPOc+H"[U_e^j_#3Jb9QoE/$<8cNugnYS3NjX>m@3<'@?sk79RW2<+m5E>t4'fHl>A6=(`S42lj*(oM7"cD"Va/Bt%i[G1Z(%**eS#g=NGu5:]B\oSnj2nr5pL9j[d\!J5.[#^cMIFk[5_!5akXp7N,.kL*j+jRo8u<N3XBr`52(46@#a\uP@[f;).7-DH%gKqu[Y@$jo:HJdpcm+<h_tfZf/ga,"OOnA&+1F``0*ZrI2g1Whr\03=*c!UP-T8@<#KDXIH0t=`J;kJ+4AP%8\ec%I&WTt/n.QaO%<S&=C+[2,-("E;C0!FTHEU$FqkB10kg*7FDG,A?%5k-<u9JR>N4umHCm&Ytmh1goD-#!TPmbM^&[<__&=T2fA'/]!#4VOt6Cl%k#%o5^YZ2pV+i,.,M;E.a>METe!+$0D]j%'%%>T7QBhV(buSH<87(b\TAD#`4`r.9`oamX%6&"a_<V)Gn)lFEuViSlhE5r$m!Eg5Z^o%n5:1YF4MHlMlk^H4GYUX,Z-MfA/b3#82Ac%I'h=rb\G'+]q4-6k$_no9KG)%8pM@iG).Kr[Hd"h7[LpkTQg_dO9U!_0k32po$D>o%H7pqr^B2[9?bJQV9Ym.%#m@Jh6t)9;YdR[_LosI2KWp<)W6SQ8d:*Fm&$9]9X]1luk1E(mTU]$"=\IoN,?3,qF!-:=;)=1.M"q5M%Q>V$1`'Vo.\)Y%_aoRR^bnKFPAut4-QUg*`7?;T,]#:U7Y@O+]-j]skgj+tB;kn8`?u%7=S+F!tVELQ;^!XG'#iba6R@JH6@jTXV%Yj:fkI$rIclbYX1JYb@"%tq3S.fuUi^c:O\i*i,oY,jm\5h%>>OY)ord')*#\kBWNneK0a:^]ncV3he"?CoL2);]>LfbN:'m1HrM%p%UgT"WNhNM5ab^BX<B:%<bX43^!m687jIZ0S7m;E=Y9$kE"%e',eB)Uf;XPdLYFV_?/LF--fPJ9nTl)[2md"jVVgUf<+siUar'f%M9`-;=4*6f*anZ!D'u?,UmMCID>%OOX)/Wb(9CM`IY=<`g">-e_7hA.Sk%G!g5bIGN[nH(B).]T&I`f7XgM&.Cb]J8]L@qnZ^9!X%`B/N5[0KnM4H8W]s$#b>k?8_(7)aO6WXsu#MO/6YrLU4ViV2HkE5/$A6eG<)%hJJhg#$X2hS.%RQ2@bB/r]sG$WNX3mlt(8k0Nho%5A'Ca6nq:$S(S;[4^4t3H.mFUdI!QZp5>9P9:lE:\O"a\h[d*b,6I#hHY!(TW*1hBAn`*FhBF'!'Rff+m+K/1I9F5\TpWOC6P4bY%?.U"X4a\/a^33ap2!S6S&:,TCYH&V4Mt6F2d@4eHn:]QuTdK,`cdsD?-t,M0XMGHg4s>>$*:e8++TC/IH6hVkXnSSq<;LucHFFNO%r]YaZiT8D)PK/F!(rJ_TM7Uhk*1K=B86C$t[V'7=]tU(sY9EOH1t^L.*.[fnI>8L(%nD8N66);=NYbmpWqL'1P26RH`ujb>L6>31%P":0=a8;Zo(0qt3]%Qm/]d$ALfW%JJg#V!6m`L&^2i+K@H/$V@^q-[a6\^"m_6-RV%"^+K%IpE%O!i:'*'&B>Ecq+orKJ0>$ln"u%S?=5YlN4paiaAR1qEBZmK?UR/9eQd(mH?hPWpo:#ND]3[/!8k:"0.^^W":a+Nk3.*3K73H&?SOQ0J^n/UDPrdp/P=54&L,Gab94a%Sm#!dge9TD-Jf%?[F7KU-eP"BeuS,rm,@g7ZhSnbOV2JmME<_(1[1KM=E(_5jbX_MYG+>:Es8q;,@i-ar,UB3npF07f8eGtk?`'U%#LsAKJA'U#MAg'i)JV(>cJ#?8U:-U.lGKl4_?B:I[B[VW7;l3p(@%&WO;:G1%qe?/?mhQ>@ml?:>As8Tf/NGnX*&Ejd<F]E5kNdM%E2jBM&E)8s<e:jngB;]#<LLtm"BE-HgaMgTe)QnOoLa1=ph!R\:a5:,=C=%Gn[g9-'q6$+Yo/@TIpBB;*>m[Ki6I(Umi>^.hKJ+<%>.Ug_Ql'c5<bK\C,,Hs(D+_LNT!8k<*[?sg,U^RigK,fB"0H@Q/rkVt?*SS?95/&P7m/"s^iZuuXsg_?AIA,XPZ=!a'SI[E=Om8j%:OfQ?7!u@X#-eQK,(nM1q48HnY'WH\=_S'"@U`>IOQY*4O&9]hL44T<?_1"FjP%1;09U;cRjSnU?E_BuaP+:+pL9j[_LZAA@fI^V%arIRX%epEO,V0p/bIe2G08J+Jk,]2S7CdWIq'?6]5koJf0il+RD=9BdV\>#n'mF1Q78F&+9cLtZ`Bcl]LjrCgErk9]E9@qPRIC80%2mTH8*S2:1$*8ge@R[`EoENeVAS`NYBf5FacbA:Tp]6Q@gXVl;=T7>u?bCWuqs!6M^\if:<""LQ)D3uj=GlCB:0CNqqX!t6^!L*U%@?4;J*ZL3FJr:kdi[J3*R#M.?pp8dd`?2QJBuiLhk'u,j5O@:2[RIX:Id*LWCdd\s4"uV?"4WJu:&sMJs!U<Ne-qq,2!R($4j2]]%@B\8P@eVZmS^8"I5Q1^67pHmn%(nUHI97pc"D6?qoI):Yd-CLf<`dJn(04GA:=]$')apqXfG<5%CQ:q'.uEg:CM.n8EseNWQTZ79%nU@e[AH)R:s,S=U/j<Xm/^%&Diq/LN6u8;=.@A5\]KA9m6;J/6ZM,*>`F=:Aq/H;gDVt>u;u4e_,LI]ZN%J7]A[KjG4uCCOFa<^8%?ahR*D@GW-K^G]ZnG2MRk!aKs!P_om&"A(=I._CUnntkgY4#ukmT1M"IJ"Q/?/Nd<Hs>oCgnAk102.<EWKN0hn\t=5bLun'^>'Dm~>%AI9_PrivateDataEnd